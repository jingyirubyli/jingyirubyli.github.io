---
layout: post
title:  DCN Lec2-Datalink and Network Layer
date:   2025-01-21
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-2.png # Add image post (optional)
tags: [Blog, DCN]
author: # Add name author (optional)
---
# 本讲内容
- Network (L3): “Best-effort” data delivery between networks
  - Mechanisms: naming, addressing, destination discovery, routing, forwarding
- Data Link (L2): “Best-effort” data delivery within a local network
  - Mechanisms: naming, addressing, destination discovery, routing, forwarding

## Network Layer vs. Data Link Layer

### 网络层和数据链路层比较 

不同点:
- 网络层是用于连接不同本地网络的全球标准协议**global standard protocol（IP）**
- 数据链路层允许每个局域网（LAN）内的**自主性autonomy**

<figure style="text-align: center;">
  <img src="/assets/img/l2p1.png" alt="Network vs. Data Link Layer" width="600">
  <figcaption>Network vs. Data Link Layer</figcaption>
</figure>

相同点:都使用同一套机制, 但是**实现方式不同**
- 命名和寻址 Naming and Addressing
- 目的地发现 Destination Discovery
- 转发 Forwarding
- 路由 Routing

**Why we need different set of solutions to solve the same set of problems?**

从高层次上看，两者都解决了同一个问题：将数据从 A 点传送到 B 点. 但是因为它们的工作规模不同：本地数据传输(local data delivery)与全局数据传输(global data delivery)，这就是区别所在！因此需要不同的解决方案.

### 交换机Switch和路由器Router

#### 交换机

交换机是一种多端口网桥，在数据链路层使用MAC地址进行数据转发。以太网交换机是最常见的网络交换机类型。

交换机工作于OSI模型的第二层，即数据链路层。交换机内部的CPU会在每个端口成功建立连接时，通过学习MAC地址并将其与端口对应，形成一张MAC地址表。在后续的通讯中，发往特定MAC地址的数据包将仅被转发至该MAC地址对应的端口，而非所有端口。交换机对数据包的转发是基于MAC地址（即物理地址）的，对于IP协议而言是透明的。也就是说，交换机在转发数据包时无需知晓源主机和目标主机的IP地址，只需知道其MAC地址即可。交换机在运行过程中会不断学习并建立自身的MAC地址表。这张表记录了每个MAC地址对应的端口。当交换机收到一个TCP/IP数据包时，会检查该数据包的目标MAC地址，并在地址表中查找对应的端口，从而决定从哪个端口转发数据包。

扩展以太网的发展：网桥network bridge——>交换式集线器switching hub——>以太网交换机enternet switch（或者第二层交换机）

#### 路由器

路由器是一种拥有多端输入和多段输出的专用计算机，其任务是转发分组。路由器连接两个或多个网络的硬件设备，在网络间起网关的作用，是读取每一个数据包中的地址然后决定如何传送的专用智能性的网络设备。 它能够理解不同的协议，例如某个局域网使用的以太网协议，因特网使用的TCP/IP协议。

路由器是工作在网络层的。同时网络层的主要工作也是路由器的转发分组。

#### 两者区别

- 都工作在转发阶段, 每个端口Port(A port is an interface through which a device connects to network)都充当输入和输出，也就是说可以在每个端口上同时发送和接收数据包(Full-duplex).
- 路由器是OSI第三层的产品，而交换机则是第二层，第二层主要功能是将网路上各个电脑的MAC位址记在MAC地址表中，当区域网路中的电脑要经过交换机去交换传递资料时，就查询交换机上的MAC地址表中的资讯，并将封包传送给指定的电脑，而不会像第一层的产品（如集线器）发送给每台在网路中的电脑。路由器可以处理TCP/IP协议，而交换机使用的是MAC地址。
- 路由器可连接超过两个以上不同的网路，而交换机只能连接两个。
- 路由器能在多条路径中选择最佳的路径，提升交换数据的传输速率。在传送封包时，路由表会被一同传送，该表存储了前往某一网络的最佳路径，如该路径的“路由度量值”，参考路由表可获得这个过程的详细描述。
- 交换机分割冲突域，但不分割广播域，而路由器分割广播域。由交换机连接的网段，仍属于同一个广播域，广播数据包会在交换机连接的所有网段上传播，这时会导致广播风暴和安全漏洞。而连接在路由器上的网段会被分配到不同的广播域。路由器不会转发广播数据。
- 路由器可以把一个IP分配给很多个主机使用，这些主机对外只表现出一个IP。路由器具有IP分享器功能，主要是让多台设备用同一条ADSL/光纤宽频线路来上网，功能包括共享IP，宽频管理，自动分配IP等等，如在共享IP功能中，不同设备可共用同一个公共IP同时上网；在区域网络中，路由器则会指定一组的Class C的私有IP，可让254台设备同时上网。交换机可以把很多主机连起来，这些主机对外各有各的IP。
- 路由器提供防火墙的服务，交换机不能提供该功能。比如集线器都是做端口扩展的，就是扩大局域网(通常都是以太网)的接入点，也就是能让局域网可以连进来更多的电脑。路由器是用来做网间连接，也就是用来连接不同的网络。

<figure style="text-align: center;">
  <img src="/assets/img/switch_router.png" alt="switch and router" width="600">
  <figcaption>switch and router</figcaption>
</figure>


## 数据链层 Data Link Layer
Most popular (wired) protocol — Ethernet 以太网
- Addressing: **MAC Adress**
- Destination Discovery: **ARP**
- Forwarding: **MAC Forwarding**
- Routing: **STP**

### Media Access Control (MAC) Address/媒体访问控制 (MAC) 地址

#### 每个网络接口（无论是物理的还是虚拟的）都有一个“MAC 地址”
- MAC 地址是一个**48位(48 bits)**的标识符，通常表示为**6个十六进制数字(6 bytes)**，例如 00:1A:2B:3C:4D:5E
- **ff:ff:ff:ff:ff:ff** 是一个特殊的 MAC 地址，称为**广播地址(Broadcast address)**，用于向网络中的所有设备发送数据
  - MAC 地址的前24位（前3个字节）称为组织唯一标识符（OUI），由 IEEE 分配给网络接口卡（NIC）的制造商
  - MAC 地址的后24位（后3个字节）由制造商分配给特定的网络接口卡
  - MAC 地址是固定的，不能更改，除非更换网络接口卡
- 一个设备可以有多个接口，因此有多个 MAC 地址
- 给定网络内每个接口的 MAC 地址必须是**unique唯一**的，由网络接口卡（NIC）的制造商分配
  - 避免地址冲突(address clashes)
  - 设备供应商确保其接口的 MAC 地址是**globally unique全球唯一**的
- MAC 地址用于在局域网（LAN）中标识设备，以便进行通信和数据传输
- MAC 地址可以通过 ARP（地址解析协议）来解析为 IP 地址，从而实现 IP 地址和 MAC 地址之间的映射

### Address Resolution Protocol (ARP)/地址解析协议 (ARP)

#### 用于获取与源主机位于同一本地网络内的目标主机的 MAC 地址
> Used to get the MAC address of a destination host within the same local network as the source host

- 假设您知道目标主机的 IP 地址
- 每个主机都维护一个本地表local table，其中包含 IP 地址到 MAC 地址的映射，称为 **ARP table**
  - 在 MAC/Linux 上运行命令`arp -a`查看表
  - 存储 IP 地址 —> MAC 地址之间的映射
- 如果在表中找到条目，则完成！
- 否则运行 `ARP` 以获取 MAC 地址

#### ARP steps

- ARP Request: 将 ARP 请求广播到本地网络
<figure style="text-align: center;">
  <img src="/assets/img/l2p5.png" alt="ARP-1" width="600">
  <figcaption>ARP-1</figcaption>
</figure>

- ARP Reply: 目标主机收到请求并将其 MAC 地址发送回源主机
<figure style="text-align: center;">
  <img src="/assets/img/l2p6.png" alt="ARP-2" width="600">
  <figcaption>ARP-2</figcaption>
</figure>

- Update local ARP table: 源主机更新其 ARP 表
<figure style="text-align: center;">
  <img src="/assets/img/l2p7.png" alt="ARP-3" width="600">
  <figcaption>ARP-3</figcaption>
</figure>

### MAC Forwarding

#### Forwarding Table
  - 每个交换机都维护一个“转发表” **Forwarding Table**
    - 表中包含 MAC 地址到端口的映射 which host is reachable via which port

  - 算法 Populating the Forwarding Table: MAC Learning/填充转发表：MAC 学习
    - 当交换机在端口 **p** 上接收到帧时：
      - 检查帧中的源 MAC 地址。假设为 **s**。
      - 获悉 MAC 地址为 **s** 的主机可通过端口 **p** 到达。
      - 将条目 **<s, p>** 添加到其转发表中。
    - 如果交换机从未收到来自主机的帧，它将永远不会获悉主机可通过哪个端口到达！

  {% highlight ruby %}
  • When a switch receives a frame on port p:
    • Checks the source MAC address in the frame. Let it be s.
    • Learns that host with MAC address s is reachable via port p.
    • Adds the entry <s, p> to its forwarding table.
  • If a switch never receives a frame sourced from a host, it will never learn which port the host is reachable on!
  {% endhighlight %}

#### 算法 MAC Forwarding

  - 收到目标 MAC 为 **d** 的帧时：
    - 如果 **d = ff:ff:ff:ff:ff:ff**，则复制帧并将其发送到除在 **— Broadcast** 上接收帧的端口之外的每个端口上
    - 如果 **d 不是 ff:ff:ff:ff:ff:ff**，则检查转发表中是否存在条目 **<d, p>**。
    - 如果条目 **<d, p>** 存在：
      - 如果 **p** 与接收帧的端口相同，则 **丢弃** 帧（否则帧可能会进入循环！）。
      - 否则，在端口 **p** 上 **发送** 帧。
    - 否则，如果不存在与 **d** 对应的条目：
      - 复制帧并将其发送到除在 **— Broadcast** 上接收帧的端口之外的每个端口上

  {% highlight ruby %}
  • On receiving a frame with destination MAC d:
    • If `d = ff:ff:ff:ff:ff:ff`, copy and send frame on every port except the port on which the frame was received on `— Broadcast`
    • If `d is not ff:ff:ff:ff:ff:ff`, then check the forwarding table for an entry <d, p>.
    • If entry <d, p> exists:
      • If p is same as the port on which frame was received, then `drop` the frame (otherwise frame may enter in a loop!).
      • Else `send` frame out on port p.
    • Else if no entry corresponding to d exists:
      • Copy and send frame on every port except the port on which the frame was received on `— Broadcast`
  {% endhighlight %}

### STP(Spanning Tree Protocol)生成树协议

STP（Spanning Tree Protocol）是一个用于局域网中消除环路的协议，它的标准是IEEE 802.1D。STP通过将部分冗余链路强制为阻塞状态，其他链路处于转发状态，将环形网络结构修剪成无环路的树形网络结构，可实现消除环路。当处于转发状态的链路不可用时，STP重新配置网络，并激活合适的备用链路状态，恢复恢复网络连通性。

狭义的STP是指IEEE 802.1D中定义的STP协议。
广义的STP包括IEEE 802.1D中定义的STP、IEEE 802.1W中定义的快速生成树协议RSTP（Rapid Spanning Tree Protocol）和IEEE 802.1S中定义的多生成树协议MSTP（Multiple Spanning Tree Protocol）。

## 网络层 Network Layer
Most popular protocol — Internet Protocol 互联网协议(IP) 
- Addressing: **IP Adress**
- Destination Discovery: **DNS**
- Forwarding: **IP Forwarding**
- Routing: **Network Routing Protocols (DV, LS, BGP)**

### IP Address

#### IP地址组成
- **IPv4** — 32 bits — Represented as **X.X.X.X** where X is 8-bit decimal
  - e.g., 192.168.3.29 (called “dotted decimal” format)
- **IPv6** has 128 bits... We will only focus on IPv4 in this course

**IP Addresses are hierarchical; unlike MAC addresses that are flat**

{% highlight ruby %}
dotted decimal format  192.168.3.29
binary format  11000000.10101000.00000011.0`0011101`
前25位为Subnet Address Prefix子网地址前缀, 后7位为Host Identifier主机标识符
{% endhighlight %}

<figure style="text-align: center;">
  <img src="/assets/img/l2p2.png" alt="IP地址" width="600">
  <figcaption>IP地址</figcaption>
</figure>

#### 子网掩码 Subnet Mask
Subnet Mask 子网掩码用于从 IP 地址提取子网地址
- 32-bit: 一连串全 1 后面跟着一连串全 0
  - e.g., 255.255.240.0 (20 1s followed by 12 0s)
- 1s in the subnet mask indicate the subnet address prefix
- 0s in the subnet mask indicate the host identifier
- 192.168.3.29/25
- 192.168.3.29/255.255.255.128
- 192.168.3.29 255.255.255.128

Subnet Address 子网地址: IP 地址（**bitwise AND/按位与**） 子网掩码
- e.g., **192.168.3.29 & 255.255.240.0 = 192.168.0.0**

无类别域间路由 Classless Inter-Domain Routing (CIDR)是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。
- A flexible representation of subnet address(Flexible number of bits allocated for subnet address)
- 子网地址在 CIDR 中表示为 **X.X.X.X/n**
  - 为子网地址分配的前 n 位都是1,称为网络位
  - 剩余的 32-n 位是主机位
  - 子网掩码是 n 个连续的 1 后面跟着 32-n 个 0
  - 子网可以支持 2^(32-n) 个 IP 地址
- E.g., Subnet address 128.32.0.0/11
  - can support 2^21 IP addresses
  - in the range 128.32.0.0 to 128.63.255.255

<figure style="text-align: center;">
  <img src="/assets/img/l2p3.jpg" alt="CIDR地址解析" width="600">
  <figcaption>CIDR地址解析</figcaption>
</figure>


#### 目标 IP 寻址类型 Types of Destination IP Addressing

- 单播 Unicast
  - 最常见的 IP 寻址类别
  - 目标 IP 地址唯一地标识单个目标主机
  - 单播数据包被发送到单个目标主机

- 广播 Broadcast
  - 目标 IP 地址为 all 1s: 255.255.255.255
  - 广播数据包被发送到同一网络中的所有主机
  - 子网的广播地址是通过将 IP 地址的主机标识符部分设置为全 1 来创建的
    - E.g., for subnet 192.4.0.0/16, broadcast address: 192.4.255.255
  - 发送方发送数据包，并将目标 IP 设置为广播 IP
  - 路由器复制replicate数据包并将其路由 route 到子网中的所有主机

- 多播 Multicast
  - A generalization of broadcast
  - 目标 IP 地址为 D 类地址
  - 多播数据包被发送到同一组中的所有主机/目标 IP 与网络中的主机子集subset（1 个或多个）相关联
  - 224.0.0.0 至 239.255.255.255 范围内的 IP 地址用作多播地址（D 类 IP 地址）
    - 接收方使用 Internet 组管理协议Internet Group Management Protocol (IGMP) 加入多播组 G
    - G 被分配多播地址 M
    - 发送方通过将目标 IP 设置为 M 将数据包发送到 G
    - 路由器将数据包复制replicate并将其路由route到组 G 中的所有主机(接收方)
  - 多播地址是通过将 IP 地址的主机标识符部分设置为全 0 来创建的
    - E.g., for multicast group 224.0.0.1, multicast address: 224.0.0.1

- 任播 Anycast
  - 一组接收者与同一个目标 IP 相关联
  - 路由算法根据某些路由指标（例如，地理位置上最接近发送者的接收者）将消息发送到组中的单个single接收者
  - 任播通常用于在运行相同服务的多个服务器之间平衡负载
  - **Anycast is typically used to balance the load across multiple servers each running the same service**

<figure style="text-align: center;">
  <img src="/assets/img/l2p4.png" alt="目标 IP 寻址类型" width="600">
  <figcaption>目标 IP 寻址类型</figcaption>
</figure>

### Domain Name System (DNS)/域名系统 (DNS)

- 用户有他们想要访问的实体的**名称name**
  - E.g., www.cnn.com
- 但是，互联网基于 **IP 地址**进行路由和转发
  - 需要将名称转换为 IP 地址
- DNS
  - A “logically” centralized infrastructure
  - 提供从名称到 IP 地址的映射
  - A simple **Query-Response** Protocol: 简单的查询-响应协议
    - User asks DNS: what is the IP address of www.cnn.com?
    - DNS responds: 157.166.255.18

<figure style="text-align: center;">
  <img src="/assets/img/l2p8.png" alt="ARP vs. DNS" width="600">
  <figcaption>ARP vs. DNS</figcaption>
</figure>

### IP Forwarding

<figure style="text-align: center;">
  <img src="/assets/img/l2p9.png" alt="MAC Forwarding vs. IP Forwarding" width="600">
  <figcaption>MAC Forwarding vs. IP Forwarding</figcaption>
</figure>

<figure style="text-align: center;">
  <img src="/assets/img/l2p10.png" alt="Complexity of IP Forwarding" width="600">
  <figcaption>Complexity of IP Forwardings</figcaption>
</figure>

#### Longest Prefix Match (LPM)/最长前缀匹配 (LPM)

- 步骤 1 - 查找表中所有匹配的子网
  - 给定表条目 **X.X.X.X/n**，将表条目的前 n 位与目标 IP 字段的前 n 位匹配

<figure style="text-align: center;">
  <img src="/assets/img/l2p11.png" alt="step1" width="600">
  <figcaption>step1</figcaption>
</figure>

- 步骤 2 - 从所有匹配的条目中，选择具有最长前缀的条目 — 层次结构中最深的子网！

<figure style="text-align: center;">
  <img src="/assets/img/l2p12.png" alt="step2" width="600">
  <figcaption>step2</figcaption>
</figure>

#### IP Forwarding Algorithm 转发算法 
- 每个路由器都维护一个“路由表”Routing Table
  - 与交换机中的转发表相比，多出两列

<div style="text-align: center;">
  <table border="1">
    <tr>
      <th>Destination</th>
      <td>Cost to destination</td>
      <td>Next hop to destination</td>
      <th>Output Port</th>
    </tr>
    <tr>
      <td></td>
      <td></td>
      <td></td>
      <td></td>
    </tr>
  </table>
</div>

- 收到目标 IP 字段为 d 的 IP 数据包时：
  - 运行最长前缀匹配 (LPM) 算法
  - 如果 LPM 在路由表中选择条目 (d、c、h、p)：
    - 将数据包发送到端口 p
  - 否则，如果 LPM 返回 NULL：
    - 丢弃数据包

### Network Routing Protocols (DV, LS, BGP)

- Distance-Vector routing protocol 距离向量路由协议
- Link State routing protocol 链路状态路由协议
- Border Gateway Protocol 边界网关协议

## Routing

How do routers learn and populate the routing tables with the paths between sources and destinations?

### A Routing Protocol: Distributed Routing Protocols
- **在每个路由器上运行的分布式算法**
  - 没有一个路由器可以“完整”地查看网络；只有部分视图
  - 交换包含部分视图的消息...
  - 收集有关全局网络图的信息
- **计算网络图中所有目的地的路径**
- **将路径信息存储在路由表routing table中**
  - 包含 <目标地址，输出端口> 形式的映射<destination address, output port>
  - 如果数据包的目的地是 X，则通过端口 P1 发送
  - 如果数据包的目的地是 Y，则通过端口 P2 发送

- **两种分布式路由协议:**
  - 分布式**路径**计算 Distributed **path** computation
    - 每个路由器使用分布式算法计算到所有其他路由器的路径，而不考虑网络拓扑
    - E.g., Spanning Tree Protocol (STP), Distance Vector Protocol (e.g.,Routing Information Protocol), Border Gateway Protocol (BGP)
  - 分布式**拓扑**计算 Distributed **topology** computation
    - 路由器使用分布式算法来学习网络拓扑
    - 每个路由器在学习到的拓扑上运行本地路径计算算法，例如 Dijkstra 的最短路径算法
    - E.g., Link State Protocol (e.g., Open Shortest Path First)

