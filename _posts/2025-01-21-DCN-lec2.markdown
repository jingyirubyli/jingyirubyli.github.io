---
layout: post
title:  DCN Lec2-Datalink and Network Layer
date:   2025-01-21
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-2.png # Add image post (optional)
tags: [Blog, DCN]
author: # Add name author (optional)
---
# 本讲内容
- Network (L3): “Best-effort” data delivery between networks
  - Mechanisms: naming, addressing, destination discovery, routing, forwarding
- Data Link (L2): “Best-effort” data delivery within a local network
  - Mechanisms: naming, addressing, destination discovery, routing, forwarding

## Network Layer vs. Data Link Layer
不同点:
- 网络层是用于连接不同本地网络的全球标准协议**global standard protocol（IP）**
- 数据链路层允许每个局域网（LAN）内的**自主性autonomy**
<!-- ![图片alt](/assets/img/l2p1.png "Network vs. Data Link Layer") -->
<img src="/assets/img/l2p1.png" alt="Network vs. Data Link Layer" width="300">

相同点:都使用同一套机制, `但是实现方式不同`
- 命名和寻址 Naming and Addressing
- 目的地发现 Destination Discovery
- 转发 Forwarding
- 路由 Routing

`Why we need different set of solutions to solve the same set of problems?`
从高层次上看，两者都解决了同一个问题：将数据从 A 点传送到 B 点！
我们真的需要不同的解决方案吗？很遗憾，是的。因为它们的工作规模不同：本地数据传输(local data delivery)与全局数据传输(global data delivery)，这就是区别所在！


## 数据链层 Data Link Layer
Most popular (wired) protocol — Ethernet 以太网
- Addressing: MAC Adress
- Destination Discovery: ARP
- Forwarding: MAC Forwarding
- Routing: STP
### Media Access Control (MAC) Address 媒体访问控制 (MAC) 地址

#### 每个网络接口（无论是物理的还是虚拟的）都有一个“MAC 地址”
- MAC 地址是一个48位(48 bits)的标识符，通常表示为6个十六进制数字(6 bytes)，例如 00:1A:2B:3C:4D:5E
- ff:ff:ff:ff:ff:ff 是一个特殊的 MAC 地址，称为广播地址(Broadcast address)，用于向网络中的所有设备发送数据
  - MAC 地址的前24位（前3个字节）称为组织唯一标识符（OUI），由 IEEE 分配给网络接口卡（NIC）的制造商
  - MAC 地址的后24位（后3个字节）由制造商分配给特定的网络接口卡
  - MAC 地址是固定的，不能更改，除非更换网络接口卡
- 一个设备可以有多个接口，因此有多个 MAC 地址
- 给定网络内每个接口的 MAC 地址必须是唯一的，由网络接口卡（NIC）的制造商分配
  - 避免地址冲突(address clashes)
  - 设备供应商确保其接口的 MAC 地址是全球唯一的
- MAC 地址用于在局域网（LAN）中标识设备，以便进行通信和数据传输
- MAC 地址可以通过 ARP（地址解析协议）来解析为 IP 地址，从而实现 IP 地址和 MAC 地址之间的映射

### Address Resolution Protocol (ARP) 地址解析协议 (ARP)

#### 用于获取与源主机位于同一本地网络内的目标主机的 MAC 地址
Used to get the MAC address of a destination host
within the same local network as the source host

- 假设您知道目标主机的 IP 地址
- 每个主机都维护一个本地表local table，其中包含 IP 地址到 MAC 地址的映射，称为 ARP table
  - 在 MAC/Linux 上运行命令“arp -a”查看表
  - 存储 IP 地址 —> MAC 地址之间的映射
- 如果在表中找到条目，则完成！
- 否则运行 ARP 以获取 MAC 地址

#### ARP

- ARP Request: 将 ARP 请求广播到本地网络
![图片alt](/assets/img/l2p5.png "ARP-1")

- ARP Reply: 目标主机收到请求并将其 MAC 地址发送回源主机
![图片alt](/assets/img/l2p6.png "ARP-2")

- Update local ARP table: 源主机更新其 ARP 表
![图片alt](/assets/img/l2p7.png "ARP-3")

### MAC Forwarding

- 每个交换机都维护一个“转发表” Forwarding Table
  - 表中包含 MAC 地址到端口的映射 which host is reachable via which port

- 算法 Populating the Forwarding Table: MAC Learning 填充转发表：MAC 学习
  - 当交换机在端口 p 上接收到帧时：
    - 检查帧中的源 MAC 地址。假设为 s。
    - 获悉 MAC 地址为 s 的主机可通过端口 p 到达。
    - 将条目 <s, p> 添加到其转发表中。
  - 如果交换机从未收到来自主机的帧，它将永远不会获悉主机可通过哪个端口到达！

{% highlight ruby %}
• When a switch receives a frame on port p:
  • Checks the source MAC address in the frame. Let it be s.
  • Learns that host with MAC address s is reachable via port p.
  • Adds the entry <s, p> to its forwarding table.
• If a switch never receives a frame sourced from a host, it
will never learn which port the host is reachable on!
{% endhighlight %}

- 算法 MAC Forwarding

  - 收到目标 MAC 为 d 的帧时：
    - 如果 `d = ff:ff:ff:ff:ff:ff`，则复制帧并将其发送到除在 `— Broadcast` 上接收帧的端口之外的每个端口上
    - 如果 `d 不是 ff:ff:ff:ff:ff:ff`，则检查转发表中是否存在条目 <d, p>。
    - 如果条目 <d, p> 存在：
      - 如果 p 与接收帧的端口相同，则 `丢弃` 帧（否则帧可能会进入循环！）。
      - 否则，在端口 p 上 `发送` 帧。
    - 否则，如果不存在与 d 对应的条目：
      - 复制帧并将其发送到除在 `— Broadcast` 上接收帧的端口之外的每个端口上

{% highlight ruby %}
• On receiving a frame with destination MAC d:
  • If `d = ff:ff:ff:ff:ff:ff`, copy and send frame on every port except the port on which the frame was received on `— Broadcast`
  • If `d is not ff:ff:ff:ff:ff:ff`, then check the forwarding table for an entry <d, p>.
  • If entry <d, p> exists:
    • If p is same as the port on which frame was received, then `drop` the frame (otherwise frame may enter in a loop!).
    • Else `send` frame out on port p.
  • Else if no entry corresponding to d exists:
    • Copy and send frame on every port except the port on which the frame was received on `— Broadcast`
{% endhighlight %}




## 网络层 Network Layer
Most popular protocol — Internet Protocol 互联网协议(IP) 
- Addressing: IP Adress
- Destination Discovery: DNS
- Forwarding: IP Forwarding
- Routing: Network Routing Protocols (DV, LS, BGP)

### IP Address

#### IP地址组成
- IPv4 — 32 bits — Represented as X.X.X.X where X is 8-bit decimal
e.g., 192.168.3.29 (called “dotted decimal” format)
- IPv6 has 128 bits... We will only focus on IPv4 in this course
`IP Addresses are hierarchical; unlike MAC addresses that are flat`

{% highlight ruby %}
dotted decimal format  192.168.3.29
binary format  11000000.10101000.00000011.0`0011101`
前25位为Subnet Address Prefix子网地址前缀, 后7位为Host Identifier主机标识符
{% endhighlight %}
![图片alt](/assets/img/l2p2.png "IP地址")

#### 子网掩码 Subnet Mask
Subnet Mask 子网掩码用于从 IP 地址提取子网地址
- 32-bit: 一连串全 1 后面跟着一连串全 0
  - e.g., 255.255.240.0 (20 1s followed by 12 0s)
- 1s in the subnet mask indicate the subnet address prefix
- 0s in the subnet mask indicate the host identifier
- 192.168.3.29/25
- 192.168.3.29/255.255.255.128
- 192.168.3.29 255.255.255.128

Subnet Address 子网地址: IP 地址（按位与） 子网掩码
- e.g., 192.168.3.29 & 255.255.240.0 = 192.168.0.0

无类别域间路由 Classless Inter-Domain Routing (CIDR)是一个用于给用户分配IP地址以及在互联网上有效地路由IP数据包的对IP地址进行归类的方法。
- A flexible representation of subnet address(Flexible number of bits allocated for subnet address)
- 子网地址在 CIDR 中表示为 X.X.X.X/n
  - 为子网地址分配的前 n 位都是1,称为网络位
  - 剩余的 32-n 位是主机位
  - 子网掩码是 n 个连续的 1 后面跟着 32-n 个 0
  - 子网可以支持 2^(32-n) 个 IP 地址
- E.g., Subnet address 128.32.0.0/11
  - can support 2^21 IP addresses
  - in the range 128.32.0.0 to 128.63.255.255

![图片alt](/assets/img/l2p3.jpg "CIDR地址解析")

#### 目标 IP 寻址类型 Types of Destination IP Addressing

- 单播 Unicast
  - 最常见的 IP 寻址类别
  - 目标 IP 地址唯一地标识单个目标主机
  - 单播数据包被发送到单个目标主机

- 广播 Broadcast
  - 目标 IP 地址为 all 1s: 255.255.255.255
  - 广播数据包被发送到同一网络中的所有主机
  - 子网的广播地址是通过将 IP 地址的主机标识符部分设置为全 1 来创建的
    - E.g., for subnet 192.4.0.0/16, broadcast address: 192.4.255.255
  - 发送方发送数据包，并将目标 IP 设置为广播 IP
  - 路由器复制replicate数据包并将其路由 route 到子网中的所有主机

- 多播 Multicast
  - A generalization of broadcast
  - 目标 IP 地址为 D 类地址
  - 多播数据包被发送到同一组中的所有主机/目标 IP 与网络中的主机子集subset（1 个或多个）相关联
  - 224.0.0.0 至 239.255.255.255 范围内的 IP 地址用作多播地址（D 类 IP 地址）
    - 接收方使用 Internet 组管理协议Internet Group Management Protocol (IGMP) 加入多播组 G
    - G 被分配多播地址 M
    - 发送方通过将目标 IP 设置为 M 将数据包发送到 G
    - 路由器将数据包复制replicate并将其路由route到组 G 中的所有主机(接收方)
  - 多播地址是通过将 IP 地址的主机标识符部分设置为全 0 来创建的
    - E.g., for multicast group 224.0.0.1, multicast address: 224.0.0.1

- 任播 Anycast
  - 一组接收者与同一个目标 IP 相关联
  - 路由算法根据某些路由指标（例如，地理位置上最接近发送者的接收者）将消息发送到组中的单个single接收者
  - 任播通常用于在运行相同服务的多个服务器之间平衡负载`Anycast is typically used to balance the load across multiple servers each running the same service`
![图片alt](/assets/img/l2p4.png "目标 IP 寻址类型")

### Domain Name System (DNS) 域名系统 (DNS)

- 用户有他们想要访问的实体的名称
  - E.g., www.cnn.com
- 但是，互联网基于 IP 地址进行路由和转发
  - 需要将名称转换为 IP 地址
- DNS
  - A “logically” centralized infrastructure
  - 提供从名称到 IP 地址的映射
  - A simple Query-Response Protocol: 简单的查询-响应协议
    - User asks DNS: what is the IP address of www.cnn.com?
    - DNS responds: 157.166.255.18

![图片alt](/assets/img/l2p8.png "ARP vs. DNS")

### IP Forwarding

![图片alt](/assets/img/l2p9.png "MAC Forwarding vs. IP Forwarding")


![图片alt](/assets/img/l2p10.png "Complexity of IP Forwarding")

#### Longest Prefix Match (LPM) 最长前缀匹配 (LPM)

- 步骤 1 - 查找表中所有匹配的子网
  - 给定表条目 X.X.X.X/n，将表条目的前 n 位与目标 IP 字段的前 n 位匹配
![图片alt](/assets/img/l2p11.png "step1")
- 步骤 2 - 从所有匹配的条目中，选择具有最长前缀的条目 — 层次结构中最深的子网！
![图片alt](/assets/img/l2p12.png "step2")

#### IP 转发算法 IP Forwarding Algorithm
- 每个路由器都维护一个“路由表”Routing Table
  - 与交换机中的转发表相比，多出两列
![图片alt](/assets/img/l2p13.png "Routing Table")

- 收到目标 IP 字段为 d 的 IP 数据包时：
  - 运行最长前缀匹配 (LPM) 算法
  - 如果 LPM 在路由表中选择条目 (d、c、h、p)：
    - 将数据包发送到端口 p
  - 否则，如果 LPM 返回 NULL：
    - 丢弃数据包


## Routing

How do routers learn and populate the routing tables with the
paths between sources and destinations?

### A Routing Protocol: Distributed Routing Protocols
- 在每个路由器上运行的分布式算法
  - 没有一个路由器可以“完整”地查看网络；只有部分视图
  - 交换包含部分视图的消息...
  - 收集有关全局网络图的信息
- 计算网络图中所有目的地的路径
- 将路径信息存储在路由表routing table中
  - 包含 <目标地址，输出端口> 形式的映射<destination address, output port>
  - 如果数据包的目的地是 X，则通过端口 P1 发送
  - 如果数据包的目的地是 Y，则通过端口 P2 发送

- 两种分布式路由协议:
  - 分布式路径计算 Distributed path computation
    - 每个路由器使用分布式算法计算到所有其他路由器的路径，而不考虑网络拓扑
    - E.g., Spanning Tree Protocol (STP), Distance Vector Protocol (e.g.,Routing Information Protocol), Border Gateway Protocol (BGP)
  - 分布式拓扑计算 Distributed topology computation
    - 路由器使用分布式算法来学习网络拓扑
    - 每个路由器在学习到的拓扑上运行本地路径计算算法，例如 Dijkstra 的最短路径算法
    - E.g., Link State Protocol (e.g., Open Shortest Path First)


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
