---
layout: post
title:  DCN Lec3
date:   2025-02-04
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-3.jpg # Add image post (optional)
tags: [Blog, Sunset]
author: # Add name author (optional)
---
- Transport (L4): (Reliable) end-to-end data delivery
  - Mechanisms: reliability, flow and congestion control, application multiplexing

# Transmission Control Protocol (TCP) 传输控制协议 (TCP)

- TCP 是最流行的传输层协议
- TCP 是一种可靠的传输协议：“可靠的传输协议确保发送应用程序发送的所有字节最终都以与发送方发送的字节顺序相同的顺序被接收应用程序接收”
- 可靠的协议实现了四种机制：
  - 应用程序多路复用 Application Multiplexing
  - 可靠性 Reliability
  - 流量控制 Flow Control
  - 拥塞控制 Congestion Control

## 应用程序多路复用 Application Multiplexing

### Application Multiplexing
- 网络层和数据链路层向主机传送数据包/从主机传送数据包
- 但一台主机可以运行多个应用程序...
- 传输层向主机上运行的应用程序发送数据/从主机上运行的应用程序接收数据 `— 应用程序多路复用`

- 当应用程序想要访问网络时，它会打开与端口port关联的套接字Socket
  - Socket: 将应用程序连接到网络堆栈的操作系统机制
    - An OS mechanism that connects applications to network stack
  - Port: 指定特定套接字的数字（通常为 16 位）
    - 操作系统确保套接字的端口号在主机内是唯一的
- 操作系统使用端口号进行应用程序多路复用，即向正确的应用程序发送数据包/从正确的应用程序接收数据包
  - The port number is used by the OS for application multiplexing, i.e., to send/receive packets to/from right applications

### Packet Header 数据包头

数据包头必须包括（除其他内容外）：
- Destination Address 目标地址（由网络用于将数据包发送到目标）
- Destination Port 目标端口（由目标处的网络堆栈用于应用程序复用，即将数据包定向到正确的应用程序）
- Source Address 源地址（由网络用于将数据包发送回源）
- Source Port 源端口（由源处的网络堆栈用于应用程序复用，即将数据包定向到正确的应用程序）

### A TCP Flow or Connection TCP 流或连接

流或连接是“类似”数据包的集合
- 网络层流是具有相同二元组的数据包集合 {src (IP) addr, dst (IP) addr}
- 传输层流是具有相同 5 元组的数据包集合
  - {src (IP) addr, dst (IP) addr, src port, dst port, protocol} 
  - 对于 TCP 流，协议字段为 6（TCP protocol num: TCP 协议编号）

![图片alt](/assets/img/l3p1.png "TCP Connection Timing Diagram")


## 可靠性 Reliability

### Reliability Algorithm 可靠性算法

#### 算法
- 发送方最多可以有 W 个未确认的数据包un-ACKed packets在传输中（称为“窗口window”）
- 发送方为每个发送的数据包设置计时器并等待确认ACKs
- 接收方为每个收到的数据包发送一个确认ACK
- 发送方在收到每个确认后发送下一个数据包（例如，第一个确认后发送 W+1 个数据包）e.g., W+1 pkt after 1st ACK
- 如果没有收到确认且数据包的计时器已到期，则发送方将重新发送该数据包

#### “Sliding” Sender Window
- TCP 中的发送方维护一个大小为 W 的“滑动”窗口
  - 发送方最多可以有 W 个字节的未确认数据在传输中
- 窗口左边缘：
  - 正在传输的数据的开始（已发送但尚未确认）
  - 某些数据已确认时滑动

#### 可靠性算法的两个问题
##### 接收方如何为数据包指定 ACK？
需要为每个发送的数据包标记一个“序列号sequence number”——接收方可以使用收到的数据包的序列号作为该数据包的 ACK
- 序列号sequence number
  - 与每个 TCP 流关联的单调递增数字
    - TCP 为发送的每个字节分配一个序列号
    - 为简单起见，我们将假设为每个数据包分配了序列号
  - TCP 流中的第一个字节被分配了一个随机序列号，称为初始序列号Initial Sequence Number (ISN)
    - 后续字节将具有序列号 ISN+1、ISN+2、......
    - 在 TCP 连接建立期间交换 ISN

- Acknowledgment (ACK)
  - TCP 使用一种称为“累积 ACK/Cumulative ACK”的 ACK 形式
  - 确认最高的连续接收序列号 ACK the highest contiguous received sequence number

累积 ACK/Cumulative ACK
- Conditions to Retransmit?
  - Duplicate ACKs or the timer expires, whichever first
  - but duplicate ACKs only tell a loss might have occurred, not that it has occurred
    - Packet may be reordered/delayed in network — will produce Dup ACKs
      - Here, do not want to re-transmit on receiving the Dup ACK as the packet is not lost!
    - Or, packet may actually be lost — will also produce Dup ACKs
      - Here, we do want to re-transmit on receiving the Dup ACK as the packet is indeed lost!
    - Impossible to know which one is the case
      - Retransmit after k Dup ACKs (TCP uses k=3)
- What packets to Retransmit?
  - Go-Back-N
    - 最小序列号开始重新传输所有未收到 ACK 的数据包
    - 效率较低，但易于实现
    - 
![图片alt](/assets/img/l3p2.png "Go-Back-N")


##### 如何设置最佳窗口大小 (W)？
由流量和拥塞控制机制决定 Flow and Congestion Control mechanisms
- 窗口大小决定发送方发送数据的速率: Send Rate ~ W/RTT bytes per sec
- 如何设置（和更新）发送方的窗口大小（W）？
  - 设置 W，使得发送方可以尽可能快地发送
  - 不会使接收方过载 — 流量控制 Flow Control
  - 不会使网络过载 — 拥塞控制 Congestion Control

3 TCP Windows
- Receiver window (RWND) for flow control 用于流量控制的接收窗口 (RWND)
  - 可以发送多少字节而不会溢出接收缓冲区receiver buffer？
  - 由接收方确定并报告给发送方
- Congestion window (CWND) for congestion control 用于拥塞控制的拥塞窗口 (CWND) 
  - 可以发送多少字节而不会溢出路由器/交换机缓冲区router/switch buffers？
  - 由发送方使用某些拥塞信号（例如丢失）计算
- Sender’s (“sliding”) window 发送方的（“滑动”）窗口
  - W = min(CWND, RWND)

## 流量控制 Flow Control

### Receiver
- 防止发送方溢出接收方的接收缓冲区
- 接收方将 ACK 数据包的 TCP 标头中的“通告窗口Advertised Window”字段设置为接收方可用的接收缓冲区空间 available receive buffer space at the receiver
### Sender
- 收到设置了通告窗口字段Advertised Window field的数据包时：
  - 发送方将 RWND 设置为通告窗口值
  - 发送方的窗口大小 (W) 最多为 RWND
    - 即，发送方最多可以有 RWND 个未确认的字节un-ACKed bytes在传输中
    - 限制发送方可以发送的速率
      - 最多有 RWND/RTT bytes/sec


## 拥塞控制 Congestion Control

### TCP 拥塞控制基础知识

- 发送方维护一个拥塞窗口Congestion Window (CWND)
  - 发送方最多可以有 CWND 个未确认的字节un-ACKed bytes在传输中
- 调整拥塞窗口 (CWND)
  - 在没有拥塞时增加 CWND
  - 检测到拥塞时减少 CWND
- 如何检测拥塞？
  - 数据包丢失（3 个重复确认或超时 3 Dup ACKs or timeout）
    - 3 Dup ACKs: 通常意味着孤立丢失 - 减少 CWND 的力度较小
    - Timeout: 通常意味着拥塞严重 - 减少 CWND 的力度要大

### Additive Increase, Multiplicative Decrease (AIMD)

- 假设 CWND 以 Maximum Segment Size/MSS（最大段大小）为单位进行测量
  - MSS 是一个可配置参数，用于指定 TCP 有效负载的最大长度
- Additive Increase 加法增加
  - 如果最后一个数据窗口成功，则将 CWND 增加 1 MSS On success of last window of data, increase CWND by 1 MSS
  - i.e., CWND = CWND + 1/CWND per (new) ACK in the window
- Multiplicative Decrease 乘法减少
  - 检测到 3 个 Dup ACK 时：CWND = CWND/2
  - 检测到超时时：CWND = 1 MSS
-  “Additive” increase and “Multiplicative” decrease is fundamental
  - 使得 TCP 中带宽的公平分配 fair share of bandwidth in TCP
  - 增加和减少因素可能有所不同（TCP 使用效果最佳的值）

### TCP Slow Start + AIMD Behavior
一个问题: 加法增加的速度太慢了
解决方案：TCP“慢启动Slow Start”阶段，实现快速提升

- Increase
  - “Slow Start” phase:
    - Start with CWND = 1 MSS (hence, called slow start) and increase CWND by 1 MSS for each new ACK
      - CWND doubles on success of last window of data
    - Exponential Increase!
  - Leave Slow Start phase and enter Additive Increase when:
    - CWND >= ssthresh (slow start threshold)
  - Additive Increase (also called “Congestion Avoidance”) phase:
    - CWND increases by 1 MSS on success of last window of data
- Decrease
  - Cut CWND to half on 3 Dup ACKs:
    - Set ssthresh = CWND/2
    - Set CWND = CWND/2
    - i.e., ensure CWND >= ssthresh to stay in additive increase phase
  - Cut CWND all the way to 1 MSS on timeout:
    - Set ssthresh = CWND/2
    - Set CWND = 1
    - i.e., ensure CWND < ssthresh (slow start) for fast ramp-up
    - but only for a short duration because of detected congestion
  - Never drop CWND below 1 MSS

![图片alt](/assets/img/l3p3.png "TCP Slow Start + AIMD Behavior")

# User Datagram Protocol 用户数据报协议 (UDP)
- UDP 是一种不可靠的传输协议
  - Application Multiplexing
  - ~~Reliability 如果数据包丢失，则不重新传输
  - ~~Flow Control 允许发送方以任意速率发送
  - ~~Congestion Control 允许发送方以任意速率发送
- UDP 是一种无连接协议 connectionless protocol
  - 发送数据前无需建立连接
    - 发送 方可以立即开始发送数据...
- 与 TCP 一样，UDP 流或连接也由 5 元组标识
  - {src addr (IP), dst addr (IP), src port, dst port, protocol: 17 (UDP)}








[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
