---
layout: post
title:  Zabbix
date:   2025-08-22
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: zabbix.png # Add image post (optional)
tags: [Blog, Web]
author: # Add name author (optional)
---
# 本讲内容

- [本讲内容](#本讲内容)
  - [Zabbix 介绍](#zabbix-介绍)
    - [zabbix的构成](#zabbix的构成)
    - [zabbix的监控对象](#zabbix的监控对象)
    - [zabbix的常用术语](#zabbix的常用术语)
  - [Zabbix 安装和配置](#zabbix-安装和配置)
    - [安装](#安装)
    - [配置](#配置)
    - [导入](#导入)
    - [web界面](#web界面)
    - [server安装](#server安装)
- [写在最后](#写在最后)


---

## Zabbix 介绍

### zabbix的构成

zabbix主要由以下5个组件构成：

1、Server

zabbix server是zabbix的核心组件，server内部存储了所有的配置信息、统计信息和操作信息。zabbix agent会向zabbix server报告可用性、完整性及其他统计信息。

2、web页面

web页面也是zabbix的一部分，通常和zabbix server位于一台物理设备上，但是在特殊情况下也可以分开配置。web页面主要提供了直观的监控信息，以方便运维人员监控管理。

3、数据库

zabbix数据库内存储了配置信息、统计信息等zabbix的相关内容。

4、proxy

zabbix proxy可以根据具体生产环境进行采用或者放弃。如果使用了zabbix proxy，则其会替代zabbix server采集数据信息，可以很好的分担zabbix server的负载。zabbix proxy通常运用与架构过大、zabbix server负载过重，或者是企业设备跨机房、跨网段、zabbix server无法与zabbix agent直接通信的场景。

5、Agent

zabbix agent通常部署在被监控目标上，用于主动监控本地资源和应用程序，并将监控的数据发送给zabbix server。


### zabbix的监控对象

zabbix支持监控各种系统平台，包括Linux和Windows等主流操作系统，也可以借助SNMP或者是SSH协议监控路由交换设备。

zabbix如果部署在服务器上，可以监控其CPU、内存、网络性能等硬件参数，也可以监控具体的服务或者应用程序、服务运行情况及性能。

硬件监控：Zabbix IPMI Interface ，通过IPMI接口进行监控，我们可以通过标准的IPMI硬件接口，监控被监控对象的物理特征，比如电压、温度、风扇状态、电源状态等。

系统监控：Zabbix Agent Interface ，通过专用的代理程序进行监控，与常见的master/agent模型类似，如果被监控对象支持对应的agent，推荐首选这种方式。

Java监控：Zabbix JMX Interface ，通过JMX进行监控，JMX（java management extensions，即java管理扩展），监控JVM虚拟机时，使用这种方法是非常不错的选择。

网络设备监控：Zabbix SNMP Interface ，通过SNMP协议与被监控对象进行通信，SNMP协议的全称为simple network management protocol，被译为简单网络管理协议，通常来说，我们无法在路由器、交换机这种硬件上安装agent，但是这些硬件都支持SNMP协议。

应用服务监控：Zabbix Agent UserParameter

MySQL数据库监控：percona-monitoring-plulgins   

URL监控：Zabbix Web 监控


### zabbix的常用术语

1、主机（host）

要监控的设备，可以由IP或者是主机名（必须可解析）指定。

2、主机组（host group）

主机的逻辑容器，包含主机和模板，主机组通常在给用户或者是用户组指派监控权限时使用。

3、监控项（item）

一个特定监控指标的相关数据，比如内存的大小、CPU的使用率，甚至是服务的运行状态等等。监控项数据来源于被监控对象，并且每个监控项都由一个key来标识。

4、触发器（trigger）

一个表达式，用于评估监控项的值是否在合理的范围内。当接收的值超出触发器的规定时，就被认为是故障，如果超出后再次符合，就被认为是正常。

5、事件（event）

触发器触发的一个特定事件，或者是zabbix定义的一个自动上线注册主机的事件。

6、动作（action）

指根据配置，zabbix对于触发器触发的特定事件进行处理的具体措施，如执行某个脚本，或者是向管理员邮箱发送邮件等等。

7、报警升级（escalation）

发送警报或者是执行远程命令的自定义方案。

8、媒介（media）

发送通知（告警）的手段，如微信、邮件、钉钉等等。

9、通知（notification）

通过指定的媒介，向用户发送的有关事件的信息。

10、远程命令（remote command）

指运维人员提前写好的命令，可以让被监控主机在触发事件后执行。

11、模板（template）

用于快速定义被监控主机的预设条目集合，通常包括了监控项、触发器、应用等，模板可以直接链接至某个主机。

12、应用（application）

一组监控项的集合。

13、web场景（web scennario）

用于检测web站点可用性的一个或多个HTTP请求。

14、前端（frontend）

zabbix的web接口。


zabbix程序组件
- Zabbix_server，服务端守护进程
- Zabbix_agentd， agent守护进程
- zabbix_proxy，代理服务器
- zabbix_database，存储系统，mysql, pgsql
- Zabbix_web， web GUI图形化界面
- Zabbix_get，命令行工具，测试向agent发起数据采集请求
- Zabbix_sender，命令行工具，测试向server发送数据
- Zabbix_java_gateway, java网关


---

## Zabbix 安装和配置

仔细读官方文档: [Zabbix中文文档][中文]
[Zabbix英文文档][英文]

[中文]: https://www.zabbix.com/documentation/current/zh/manual/installation/
[英文]: https://www.zabbix.com/documentation/current/en/manual/installation/


### 安装

**看从源代码安装部分:**

> 需要命令行开发人员工具（不需要Xcode），Automake，pkg-config和PCRE（v8.x）或PCRE2（v10.x）。如果要使用TLS构建 agent 二进制文件，则还需要 OpenSSL 或 GnuTLS。

安装 Automake 和 pkg-config：

```zsh
$ brew install automake
$ brew install pkg-config
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix2.png" alt="" width="500">
<figcaption>检查安装</figcaption>
</figure>

> 如何准备 PCRE、OpenSSL 和 GnuTLS 库取决于它们如何链接到 agent。 如果您打算在已具有这些库的 macOS 计算机上运行代理二进制文件，则可以使用 Homebrew 提供的预编译库。这些通常是 macOS 机器，它们使用 Homebrew 来构建 Zabbix agent 二进制文件或用于其他目的。如果 agent 的二进制文件将在没有共享版本的库的 macOS 计算机上使用，则应从源代码编译静态库，并将 Zabbix agent与它们链接。

我理解这段话是如果机器上已经存在这几个包, 直接用就行. 如果没有就需要自己安装一下. 

**使用共享库构建 agent 二进制文件**

安装命令:

```zsh
# 安装 PCRE2 (如果需要的话，在下面的命令中将 pcre2 替换为 pcre )：
$ brew install pcre2
# 使用TLS构建时，请安装OpenSSL和/或GnuTLS：
$ brew install openssl
$ brew install gnutls
```

检查一下机器上有没有这几个包:

```zsh
% brew list pcre2
% brew list openssl
# openssl 和 gnutls 二选一即可, 我机器上就没有gnutls
% brew list gnutls
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix3.png" alt="" width="500">
<figcaption>检查pcre2</figcaption>
</figure>

<figure style="text-align: center;">
<img src="/assets/img/zabbix4.png" alt="" width="500">
<figcaption>检查openssl</figcaption>
</figure>

查看版本:

```zsh
% pcre2grep --version
% pcre2-config --version
% openssl version
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix5.png" alt="" width="500">
<figcaption>检查pcre2和openssl版本</figcaption>
</figure>

下载 Zabbix 源代码, 注意不能在根目录(只读权限)安装.

```zsh
$ git clone https://git.zabbix.com/scm/zbx/zabbix.git
# 可以看到从官网安装报错
$ git clone https://github.com/zabbix/zabbix.git
# 从github下载成功
```

clone 过程网络中断 导致的（Zabbix 官方仓库比较大，7k+ 文件，Git HTTP 传输容易中断）。

<figure style="text-align: center;">
<img src="/assets/img/zabbix6.png" alt="" width="500">
<figcaption>zabbix.com 下载 Zabbix 源代码</figcaption>
</figure>

<figure style="text-align: center;">
<img src="/assets/img/zabbix7.png" alt="" width="500">
<figcaption>github 下载 Zabbix 源代码</figcaption>
</figure>

**不使用 TLS 构建 agent：**

解释: agent 在编译的时候没有启用 TLS 支持（没连 OpenSSL / GnuTLS），所以最终的二进制程序 只支持明文传输。特点：和 Zabbix server/proxy 通讯时，数据（监控项、主机名、密钥）全部是 明文。安装简单，不依赖 OpenSSL 等库。功能齐全，但 缺乏加密和认证。适用场景：agent 和 server 部署在 同一台机器，只做本地监控。在一个完全隔离的安全内网，没有数据被窃取的风险。想快速上手测试 Zabbix，先不考虑安全。


我使用openssl, 所以这里只贴一下官方文档的代码.

```zsh
$ cd zabbix
$ ./bootstrap.sh
# --sysconfdir=/usr/local/etc/zabbix 只是 告诉 configure 配置文件的安装位置，和 Zabbix 源码本身的路径没关系。
$ ./configure --sysconfdir=/usr/local/etc/zabbix --enable-agent --enable-ipv6
$ make
$ make install
```

**使用 OpenSSL 构建 agent：**

解释: 在编译/安装 agent 时，指定 --with-openssl，启用了 TLS 功能。特点：agent 和 server/proxy 之间通讯可以 加密（防止中间人攻击、窃听）。支持 身份认证（基于 PSK 或 证书）。部署稍微复杂，需要配置证书或密钥。适用场景：server 和 agent 跨公网通讯。内网环境里有 合规要求（如 GDPR、HIPAA）。需要确认 agent 身份，防止伪造数据。


```zsh
$ cd zabbix
$ ./bootstrap.sh
# 注意下面这行要按自己的配置写路径
$ ./configure --sysconfdir=/usr/local/etc/zabbix --enable-agent --enable-ipv6 --with-openssl=/usr/local/opt/openssl
$ make
$ make install
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix8.png" alt="" width="500">
<figcaption>./bootstrap.sh</figcaption>
</figure>

我使用的命令:

```zsh
# 注意openssl路径, 上面我们查到的是 openssl@3, 这里就使用 openssl@3
./configure --sysconfdir=/usr/local/etc/zabbix --enable-agent --enable-ipv6 --with-openssl=/opt/homebrew/opt/openssl@3
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix9.png" alt="" width="500">
<figcaption>Thank you for using Zabbix!</figcaption>
</figure>

其实这里我修改了几次路径, 最后还是用了最初的命令. 按理说只要自己能搞清楚路径分别在哪里就行.

记录一下我最后一次 ./configure 后输出的config:

```
Configuration:

  Detected OS:           darwin24.6.0
  Install path:          /usr/local
  Compilation arch:      osx

  Compiler:              gcc
  Compiler flags:         -g -O2 -I/opt/homebrew/Cellar/pcre2/10.45/include

  Library-specific flags:
    libpcre2:              -I/opt/homebrew/Cellar/pcre2/10.45/include
    TLS:                   -I/opt/homebrew/opt/openssl@3/include

  Enable server:         no

  Enable proxy:          no

  Enable agent:          yes
  Agent details:
    TLS:                   OpenSSL
    Modbus:                no
    Linker flags:             -L/opt/homebrew/opt/openssl@3/lib   -rdynamic  -L/opt/homebrew/Cellar/pcre2/10.45/lib 
    Libraries:                -lssl -lcrypto   -lpcre2-8 -lpthread -lm  -lresolv -liconv
    Configuration file:    /usr/local/etc/zabbix/zabbix_agentd.conf
    Modules:               /usr/local/lib/modules

  Enable agent 2:        no

  Enable web service:    no

  Enable Java gateway:   no

  LDAP support:          no
  IPv6 support:          yes
  cmocka support:        no

  yaml support:          no

***********************************************************
*            Now run 'make install'                       *
*                                                         *
*            Thank you for using Zabbix!                  *
*              <https://www.zabbix.com>                   *
***********************************************************
```


下一步是 install, 根据指引, 依次运行:

```zsh
$ make
# make 一般不会报错
$ make install
# 如果报权限错误, 使用 sudo make install. 我就是因为这个权限错误改了几次路径, 发现都不成功, 最终只能使用sudo
```

确认可执行文件安装位置:

```zsh
which zabbix_agentd
which zabbix_sender
which zabbix_get
# 查看man手册是否可用
man zabbix_agentd
```

修改 /usr/local/etc/zabbix/zabbix_agentd.conf 中的 server 地址为本机地址.

启动apache, 按官方文档，将zabbix需要的文件复制到指定的web目录下. 我的zabbix目录安装位置在: /Users/jingyili/Projects/zabbix, 要把这个文件放在apache有权限处理的web目录: /opt/homebrew/var/apache/

需要找的zabbix.php路径在: /opt/homebrew/var/apache/zabbix/ui/zabbix.php

所以需要编辑一下apache的.conf文件, 添加该路径: sudo vim /opt/homebrew/etc/httpd/httpd.conf 

添加以下内容:

```
Alias /zabbix "/opt/homebrew/var/apache/zabbix/ui"

<Directory "/opt/homebrew/var/apache/zabbix/ui">
    Options Indexes FollowSymLinks
    AllowOverride All
    Require all granted
</Directory>
```

重启apache, 即可访问 http://localhost/zabbix

<figure style="text-align: center;">
<img src="/assets/img/zabbix10.png" alt="" width="500">
<figcaption>成功访问zabbix.php</figcaption>
</figure>

<figure style="text-align: center;">
<img src="/assets/img/zabbix11.png" alt="" width="500">
<figcaption>成功打开zabbix主页</figcaption>
</figure>


检查zabbix-agent运行状态:

```zsh
# 前台启动（调试模式） -f 表示 前台运行，可以在终端看到日志
/usr/local/sbin/zabbix_agentd -c /usr/local/etc/zabbix/zabbix_agentd.conf -f
# 后台启动（守护进程模式） 在后台启动 agent
/usr/local/sbin/zabbix_agentd -c /usr/local/etc/zabbix/zabbix_agentd.conf
# 测试 agent 是否工作返回 1 说明 agent 正常响应, 然后可以在 Zabbix Server 前端添加这台机器作为监控主机
zabbix_agentd -t agent.ping -c /usr/local/etc/zabbix/zabbix_agentd.conf
# 检查进程
ps aux | grep zabbix_agentd
```

输出 [u|1] 表示 Zabbix Agent 正常运行并响应请求:

<figure style="text-align: center;">
<img src="/assets/img/zabbix12.png" alt="" width="500">
<figcaption>检查zabbix-agent运行状态</figcaption>
</figure>


### 配置

自动访问http://localhost/zabbix/setup.php, 即在出生点点next step, 会进入到pre-requiment check, 如果有不满足的会标红, 我截图的时候已经修好配置了, 所以在官方论坛上找了一张图. 看了一圈国内的教程, 一般也就是这三条会标红.

<figure style="text-align: center;">
<img src="/assets/img/zabbix13.png" alt="" width="500">
<figcaption>pre-requirment要求</figcaption>
</figure>

好吧, 接下来就要修改php.ini了. 在这里耗了很久, 感觉之前配的apache还是有点未知问题, 导致重启失败也不会报错,没有告警, 所以修改后的php.ini没有生效, 因为这个问题找了很久原因, 最终发现还是要强制重启一下. 接下来详细讲下过程.

首先找到你的php.ini路径: php --ini

会返回如下信息: Loaded Configuration File: /opt/homebrew/etc/php/8.4/php.ini

<figure style="text-align: center;">
<img src="/assets/img/zabbix15.png" alt="" width="500">
<figcaption>php --ini查找php.ini路径</figcaption>
</figure>

或者在phpinfo网址上查找Loaded Configuration File:

<figure style="text-align: center;">
<img src="/assets/img/zabbix14.png" alt="" width="500">
<figcaption>phpinfo网址上查找php.ini路径</figcaption>
</figure>

这就是你的apache使用的php配置, 我们需要修改其中标红的几个参数.

```
# /搜索这几条参数, 按官方要求修改即可. 保存退出.
# ;注释
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
# 修改好后重启
brew services restart php
brew services restart httpd
```

按理说重启后刷新一下就可以生效了, 但是这里httpd重启执行不了, 没有任何提示, php重启是正常的. 所以最好强制重启一次:

```zsh
# 停止 Homebrew 服务
brew services stop httpd
# 强制杀掉残留进程
sudo pkill -9 httpd
# 确认没有 httpd 进程
ps aux | grep httpd
# php也可以强制重启一次, 但是不必要
brew services stop php
sudo pkill -9 php-fpm
ps aux | grep php-fpm
```

此时再刷新zabbix页面,就可以看到全部通过了:

<figure style="text-align: center;">
<img src="/assets/img/zabbix16.png" alt="" width="500">
<figcaption>pre-requisites全部满足</figcaption>
</figure>

另外有些教程上会修改www.conf, 在末尾添加类似配置. 我机器上的路径是: /opt/homebrew/etc/php/8.4/php-fpm.d/www.conf. 但是我不清楚这个是不是影响, 因为改了www.conf之后刷新页面还是没有应用, 所以我个人觉得还是重启的问题.

<figure style="text-align: center;">
<img src="/assets/img/zabbix17.png" alt="" width="500">
<figcaption>编辑www.conf</figcaption>
</figure>

在phpinfo里查找, 发现确实修改成功:

<figure style="text-align: center;">
<img src="/assets/img/zabbix18.png" alt="" width="500">
<figcaption>在phpinfo中检查</figcaption>
</figure>

总结一下这部分: 只要有残留的 Apache 或 PHP-FPM 旧进程，修改 php.ini 都不会生效。确保先彻底停止，再启动新的服务，这样 Zabbix 前端的 PHP 检查才能通过。

### 导入

先查看一下MySQl的用户列表:

```
# 登录
mysql -u root -p
SELECT User, Host FROM mysql.user;
# 输出

mysql> SELECT User, Host FROM mysql.user;
+------------------+-----------+
| User             | Host      |
+------------------+-----------+
| mysql.infoschema | localhost |
| mysql.session    | localhost |
| mysql.sys        | localhost |
| root             | localhost |
+------------------+-----------+

```

发现前 MySQL 中只有默认系统用户和 root，没有 zabbix 用户. 这也是下面前端提示 Access denied for user ‘zabbix’@‘localhost’ 的原因。

下面是Configure DB connection, 这一步 Zabbix 前端尝试用你提供的用户名/密码连接 MySQL，如果没有创建的话, 页面就会报 MySQL 没有这个用户或者权限不足。先创建一个用户:

```
# 登录 MySQL（用 root 或有权限用户）
mysql -u root -p
# 创建 Zabbix 数据库
CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;
# 创建 Zabbix 数据库用户并授权, 替换 'your_password' 为你想用的密码。
CREATE USER 'zabbix'@'localhost' IDENTIFIED BY 'your_password';
GRANT ALL PRIVILEGES ON zabbix.* TO 'zabbix'@'localhost';
FLUSH PRIVILEGES;
```

下面需要导入 Zabbix 前端 .sql 文件, 这里据说是 Zabbix 源码中自带初始化 SQL 文件，我查了下源码路径: /Users/jingyili/Projects/zabbix/database/mysql, 按理说里面应该存在schema.sql, images.sql, data.sql三个文件, 但是现在只有images.sql一个, 直接点下一步的话报错: Cannot connect to the database. Unable to determine current Zabbix database version: the table "dbversion" was not found.

<figure style="text-align: center;">
<img src="/assets/img/zabbix19.png" alt="" width="500">
<figcaption>导入.sql</figcaption>
</figure>

同样要截图的时候已经解决了 the table "dbversion" was not found 错误, 图片是论坛上找的.

<figure style="text-align: center;">
<img src="/assets/img/zabbix20.png" alt="" width="500">
<figcaption>dbversion报错</figcaption>
</figure>

此时可以顺手检查一下zabbix.conf.php（一般在 zabbix/ui/conf 或 zabbix/ui 下）：

```
$DB['TYPE']     = 'MYSQL';
$DB['SERVER']   = 'localhost';
$DB['PORT']     = '0';
$DB['DATABASE'] = 'zabbix';
$DB['USER']     = 'zabbix';
$DB['PASSWORD'] = 'your_password';
```

一般这个应该是自动配置好的吧, 不需要自己写.

说一下报错: Details: Cannot connect to the database. Unable to determine current Zabbix database version: the table "dbversion" was not found. 这个错误说明 Zabbix 前端已经能连接 MySQL 用户和密码了，但是 数据库里没有初始化表，尤其是 dbversion 表，这是 Zabbix 数据库的核心表之一。也就是说没有导入初始化 SQL 文件, 这就是上面缺少的两个文件.

而检查一下tables, 发现数据库 zabbix 已经存在, 用户 zabbix 已经存在，并且可以连接, 但是数据库里没有任何表 → 所以 dbversion 表自然找不到:

```
mysql> use zabbix;
Database changed
mysql> SHOW TABLES;
Empty set (0.00 sec)
```

一通分析后, 发现解决方法只能是导入初始化 SQL 文件. 我们一般都会想到重新下载源码, 但是问题是我查了源码, 发现每个branch的该目录下都只有image.sql, 所以重新下载也行不通. 我查了中英文论坛, 没有MacOS的解决方法, 只有旧版的Linux, 而新版linux估计也解决不了. 此时注意到目录下有Makefile文件, 猜测是不是需要手动生成 schema.sql 和 data.sql:


```zsh 
cd ~/Projects/zabbix/database/mysql
# 尝试运行. 这条命令会运行 Makefile.am 里定义的生成规则，把模板和生成脚本组合成 schema.sql 和 data.sql
make schema.sql data.sql
```

事实证明确实生成了 schema.sql 和 data.sql.

<figure style="text-align: center;">
<img src="/assets/img/zabbix21.png" alt="" width="500">
<figcaption>Makefile生成schema.sql 和 data.sql</figcaption>
</figure>

```
# 依次导入 MySQL, 注意顺序
mysql -u zabbix -p zabbix < schema.sql
mysql -u zabbix -p zabbix < images.sql
mysql -u zabbix -p zabbix < data.sql
```

果不其然又报错了:

ERROR 1419 (HY000) at line 2444: You do not have the SUPER privilege and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)

这个错误是 MySQL 的权限限制导致的：Zabbix 的 SQL 脚本里创建了 存储函数或触发器, MySQL 开启了 binary logging，默认要求创建函数的用户必须有 SUPER 权限. 现在用的 zabbix 用户没有 SUPER 权限 → 导入失败

<figure style="text-align: center;">
<img src="/assets/img/zabbix22.png" alt="" width="500">
<figcaption>导入.sql报错</figcaption>
</figure>

解决: 给用户临时 SUPER 权限

```
# 登录 MySQL root
mysql -u root -p
# 给 zabbix 用户授予 SUPER 权限
GRANT SUPER ON *.* TO 'zabbix'@'localhost';
FLUSH PRIVILEGES;
# 导入
mysql -u zabbix -p zabbix < schema.sql
mysql -u zabbix -p zabbix < images.sql
mysql -u zabbix -p zabbix < data.sql

# 完成后可以收回权限. 但是自己用就没必要了.
REVOKE SUPER ON *.* FROM 'zabbix'@'localhost';
FLUSH PRIVILEGES;

```

你以为现在就解决了么, 哈哈哈不可能的, 继续报错: 

Enter password: 
ERROR 1050 (42S01) at line 1: Table 'role' already exists
Enter password: 
ERROR 1146 (42S02) at line 1: Table 'zabbix.images' doesn't exist
Enter password: 
ERROR 1146 (42S02) at line 2: Table 'zabbix.role' doesn't exist

这些错误说明数据库里已经存在部分表了：ERROR 1050 (42S01) at line 1: Table 'role' already exists → 表 role 已经存在, 导致再次导入 schema.sql 失败. 因为我们还没有导入.sql的时候就创建了表, 所以删除重新创建一下:

```
# 仍然是>mysql环境
# 删除旧的 zabbix 数据库
DROP DATABASE zabbix;
CREATE DATABASE zabbix CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;
然后重新导入：
mysql -u zabbix -p zabbix < schema.sql
mysql -u zabbix -p zabbix < images.sql
mysql -u zabbix -p zabbix < data.sql
```

输入三次密码, 成功:

<figure style="text-align: center;">
<img src="/assets/img/zabbix23.png" alt="" width="500">
<figcaption>成功导入.sql</figcaption>
</figure>

此时刷新zabbix页面, 成功:

<figure style="text-align: center;">
<img src="/assets/img/zabbix25.png" alt="" width="500">
<figcaption>成功导入.sql</figcaption>
</figure>

在mysql环境下检查:

```
mysql> USE zabbix;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> SHOW TABLES;
+----------------------------+
| Tables_in_zabbix           |
+----------------------------+
| acknowledges               |
| actions                    |
| alerts                     |
| auditlog                   |
| autoreg_host               |
| changelog                  |
| conditions                 |
| config_autoreg_tls         |
| connector                  |
| connector_tag              |
| corr_condition             |
| corr_condition_group       |
| corr_condition_tag         |
| corr_condition_tagpair     |
| corr_condition_tagvalue    |
| corr_operation             |
| correlation                |
| dashboard                  |
| dashboard_page             |
| dashboard_user             |
| dashboard_usrgrp           |
| dbversion                  |
| dchecks                    |
| dhosts                     |
| drules                     |
| dservices                  |
| escalations                |
| event_recovery             |
| event_suppress             |
| event_symptom              |
| event_tag                  |
| events                     |
| expressions                |
| functions                  |
| globalmacro                |
| globalvars                 |
| graph_discovery            |
| graph_theme                |
| graphs                     |
| graphs_items               |
| group_discovery            |
| group_prototype            |
| ha_node                    |
| hgset                      |
| hgset_group                |
| history                    |
| history_bin                |
| history_log                |
| history_str                |
| history_text               |
| history_uint               |
| host_discovery             |
| host_hgset                 |
| host_inventory             |
| host_proxy                 |
| host_rtdata                |
| host_tag                   |
| hostmacro                  |
| hostmacro_config           |
| hosts                      |
| hosts_groups               |
| hosts_templates            |
| housekeeper                |
| hstgrp                     |
| httpstep                   |
| httpstep_field             |
| httpstepitem               |
| httptest                   |
| httptest_field             |
| httptest_tag               |
| httptestitem               |
| icon_map                   |
| icon_mapping               |
| ids                        |
| images                     |
| interface                  |
| interface_discovery        |
| interface_snmp             |
| item_condition             |
| item_discovery             |
| item_parameter             |
| item_preproc               |
| item_rtdata                |
| item_rtname                |
| item_tag                   |
| items                      |
| lld_macro_export           |
| lld_macro_path             |
| lld_override               |
| lld_override_condition     |
| lld_override_opdiscover    |
| lld_override_operation     |
| lld_override_ophistory     |
| lld_override_opinventory   |
| lld_override_opperiod      |
| lld_override_opseverity    |
| lld_override_opstatus      |
| lld_override_optag         |
| lld_override_optemplate    |
| lld_override_optrends      |
| maintenance_tag            |
| maintenances               |
| maintenances_groups        |
| maintenances_hosts         |
| maintenances_windows       |
| media                      |
| media_type                 |
| media_type_message         |
| media_type_oauth           |
| media_type_param           |
| mfa                        |
| mfa_totp_secret            |
| module                     |
| opcommand                  |
| opcommand_grp              |
| opcommand_hst              |
| opconditions               |
| operations                 |
| opgroup                    |
| opinventory                |
| opmessage                  |
| opmessage_grp              |
| opmessage_usr              |
| optag                      |
| optemplate                 |
| permission                 |
| problem                    |
| problem_tag                |
| profiles                   |
| proxy                      |
| proxy_autoreg_host         |
| proxy_dhistory             |
| proxy_group                |
| proxy_group_rtdata         |
| proxy_history              |
| proxy_rtdata               |
| regexps                    |
| report                     |
| report_param               |
| report_user                |
| report_usrgrp              |
| rights                     |
| role                       |
| role_rule                  |
| scim_group                 |
| script_param               |
| scripts                    |
| service_alarms             |
| service_problem            |
| service_problem_tag        |
| service_status_rule        |
| service_tag                |
| services                   |
| services_links             |
| sessions                   |
| settings                   |
| sla                        |
| sla_excluded_downtime      |
| sla_schedule               |
| sla_service_tag            |
| sysmap_element_trigger     |
| sysmap_element_url         |
| sysmap_link_threshold      |
| sysmap_shape               |
| sysmap_url                 |
| sysmap_user                |
| sysmap_usrgrp              |
| sysmaps                    |
| sysmaps_element_tag        |
| sysmaps_elements           |
| sysmaps_link_triggers      |
| sysmaps_links              |
| tag_filter                 |
| task                       |
| task_acknowledge           |
| task_check_now             |
| task_close_problem         |
| task_data                  |
| task_remote_command        |
| task_remote_command_result |
| task_result                |
| timeperiods                |
| token                      |
| trends                     |
| trends_uint                |
| trigger_depends            |
| trigger_discovery          |
| trigger_queue              |
| trigger_tag                |
| triggers                   |
| ugset                      |
| ugset_group                |
| user_scim_group            |
| user_ugset                 |
| userdirectory              |
| userdirectory_idpgroup     |
| userdirectory_ldap         |
| userdirectory_media        |
| userdirectory_saml         |
| userdirectory_usrgrp       |
| users                      |
| users_groups               |
| usrgrp                     |
| valuemap                   |
| valuemap_mapping           |
| widget                     |
| widget_field               |
+----------------------------+
207 rows in set (0.01 sec)
```


### web界面

检查zabbix使用的账号权限: 如果用户 zabbix 在 MySQL 中创建时没指定 REQUIRE SSL，客户端可以不使用 SSL 来连。

```sql
SHOW GRANTS FOR 'zabbix'@'localhost';
# 如果没有 REQUIRE SSL，说明这个用户可以非加密登录。
SHOW SESSION STATUS LIKE 'Ssl_version';
# 如果结果是空的，说明你没有通过 TLS 连接成功。
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix28.png" alt="" width="300">
<figcaption>没有通过 TLS 连接</figcaption>
</figure>

```
# 在shell里连接数据库时加上 --ssl-mode=REQUIRED
mysql -u zabbix -p --ssl-mode=REQUIRED zabbix
# 在 MySQL 客户端 (SQL 命令行) 执行 SQL 语句
SHOW SESSION STATUS LIKE 'Ssl_version';
# TLS 生效
+---------------+---------------------+
| Variable_name | Value               |
+---------------+---------------------+
| Ssl_version   | TLSv1.3             |
+---------------+---------------------+

```

<figure style="text-align: center;">
<img src="/assets/img/zabbix29.png" alt="" width="500">
<figcaption> TLS 生效</figcaption>
</figure>


继续next step, 此时可能会出现红字报错说没有configure文件, 直接点进链接下载, 然后mv到它要求的位置, 刷新. 然后出现用户名密码登陆界面, 输入默认用户名Admin, 密码zabbix, 即可作为 Zabbix超级用户登录(将授予对所有菜单的访问权限)。登入dashboard:

> 若采用从源代码安装 Zabbix，请下载配置文件并将其 Zabbix PHP 文件复制到所在网站服务器 HTML 文件子目录中的 conf/ 下。

> 注意不要头铁一直输自己的用户名密码. 因为有防止暴力破解: 为了防止暴力破解和词典攻击，如果发生连续五次尝试登录失败，Zabbix界面将暂停30秒。

登录成功后将显示尝试登录失败的IP地址。

<figure style="text-align: center;">
<img src="/assets/img/zabbix26.png" alt="" width="500">
<figcaption>下载配置文件</figcaption>
</figure>

<figure style="text-align: center;">
<img src="/assets/img/zabbix24.png" alt="" width="500">
<figcaption>成功登录dashboard</figcaption>
</figure>

成功以默认身份登入, 即可按照官方文档创建自己的新用户. 创建完成后以自己的身份重新登录即可.

<figure style="text-align: center;">
<img src="/assets/img/zabbix27.png" alt="" width="500">
<figcaption>创建自己的用户</figcaption>
</figure>


注意: Zabbix 的 Web 前端页面（PHP 界面）和 Zabbix Server 是两个不同的组件：
Zabbix Server: 核心进程，负责和数据库、Agent、Proxy 等交互。没有它，就没有“监控逻辑”和“采集数据”。

Zabbix Web (Frontend): 只是一个 PHP 写的管理页面（运行在 Apache/Nginx + PHP 上）。它本身不会采集数据，只是一个 管理 UI。Web 前端需要连接数据库（MySQL/PostgreSQL 等），然后从数据库里读配置、写配置。

现在我没有安装zabbix-server, 但是安装并配置了 Zabbix Web 前端 + 数据库，这两个就能打开页面，甚至能创建用户、配置主机等。
但是此时页面里的“主机监控”、“触发器”等功能都不会真正生效，因为背后没有 Zabbix Server 进程在跑。Web 只是把你在页面上的操作写进数据库里，等 Zabbix Server 启动后才会真正生效。

所以至此完成/未完成列出:
- [ ] Zabbix-server 
- [x] Zabbix-agent
- [x] Zabbix-frontend (web, php+nginx/apache)
- [x] MySQL

使用以下的命令检查:

```zsh
# 检查是否有 zabbix-server
which zabbix_server
ps aux | grep zabbix_server
# 检查是否有 zabbix-agent
which zabbix_agentd
which zabbix_agent2
ps aux | grep zabbix_agent
# 检查是否有 Zabbix Web 前端 (PHP 页面)
ls /opt/homebrew/var/apache/zabbix
```

```sql
# 检查数据库
SHOW DATABASES LIKE 'zabbix';
# 可能会进行重连
ERROR 2006 (HY000): MySQL server has gone away
No connection. Trying to reconnect...
Connection id:    837
Current database: zabbix

+-------------------+
| Database (zabbix) |
+-------------------+
| zabbix            |
+-------------------+
1 row in set (0.18 sec)

USE zabbix;
SHOW TABLES;
# 数据库已初始化成功（包含完整表结构和初始数据）。
```

### server安装

8.26编辑: 昨天开学了, 上周有个快递被可恶的ups放到自提点, 只能多坐一个小时公交去拿. 晚上回来继续配这个. 根据官方的安装方法, 源码编译不了, 很多报错, 一一解决了之后还是会报 configure: error: Could not find the options function for mysql init 或者 checking for ICONV support... configure: error: Unable to use iconv (libiconv check failed). 这两个somehow可以指定路径呀, 某些方法消除, 但是感觉治标不治本, 最难解决的报错是 zabbix configure: error: Not found mysqlclient library, 查 config.log 也查不到详细原因. 思考一晚上, 猜测是不是源码文件不对, 发现之前我们缺少的两个.sql文件在官网直接下载的包里面是有的. 但是也不能确定是不是包的原因, 担心直接替换会有风险. 但是还是试了一下, 毕竟只编译server, 不会覆盖agent. 事实证明不行, 且这次发现config.log里有这样的提示, 其中还有很多头文件提示缺失, 考虑还是mac适配问题, 所以不折腾了, 用docker吧:

<figure style="text-align: center;">
<img src="/assets/img/zabbix30.png" alt="" width="500">
<figcaption>查看config.log</figcaption>
</figure>

不行, 试了好久, 还是无法连接到web. 道心破碎了.

<figure style="text-align: center;">
<img src="/assets/img/zabbix31.png" alt="" width="500">
<figcaption>server无法启动</figcaption>
</figure>

不行, 道心破碎了. 不知道哪里有问题, 暂时放弃了.
<figure style="text-align: center;">
<img src="/assets/img/zabbix32.png" alt="" width="500"><img src="/assets/img/zabbix33.png" alt="" width="500">
<figcaption>docker内容</figcaption>
</figure>

记录几条命令:

```zsh
# 查看端口连接
nc -zv localhost 10051 
# 强制启动httpd 
sudo /opt/homebrew/bin/httpd -DFOREGROUND  
```

<figure style="text-align: center;">
<img src="/assets/img/zabbix34.png" alt="" width="500">
<figcaption>sudo /opt/homebrew/bin/httpd -DFOREGROUND 解决以上报错</figcaption>
</figure>

---

# 写在最后

现在的目录对比
- /usr/local/etc/zabbix/ → 这是 agent 配置目录（zabbix_agentd.conf）。
- /usr/local/sbin/zabbix_agentd → agent 可执行文件。
- 缺少 /usr/local/sbin/zabbix_server 和 /usr/local/etc/zabbix/zabbix_server.conf → 说明没有装 server。