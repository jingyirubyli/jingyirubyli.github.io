---
layout: post
title:  Ansible 自动化运维
date:   2025-08-20
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: ansible.png # Add image post (optional)
tags: [Blog, Web]
author: # Add name author (optional)
---
# 本讲内容

早期运维人员会结合ssh免密登录以及shell脚本来完成自动化的部署操作。
系统管理员面临的问题主要是，配置管理系统，远程执行命令，批量安装服务，启停服务等等后来也就诞生了众多的开源自动化运维软件: 如fabric, puppet, saltstack, chef, Ansible. 其中saltstack和ansible都是python开发的.

ansible是一个同时管理多个远程主机的软件，必须是任意可以通过ssh登录的机器，因此ansible可以管理的机器如远程虚拟机, 物理机, 也可以直接管理本机机器.
ansible通过ssh协议实现了，管理节点（老板，安装了ansible服务的机器），被管理节点（员工，被管理的机器节点）的通信。
只要是通过ssh协议登录的主机，就可以完成ansible自动化部署操作: 批量文件分发, 批量数据复制, 批量数据修改/删除, 批量自动化安装软件服务, 批量服务启停, 脚本化，自动批量服务部署.

ansible的编排引擎可以出色的完成各种任务配置管理，ansible在流程控制，资源部署等方便很强大，并且ansible无须安装客户端软件，管理简洁，使用yaml配置文件语法，功能强大，便于维护。
ansible是基于python语言开发的，主要由python的两个ssh处理模块，paramiko，以及PyYAML模块: 安装部署简单; 管理主机便捷，支持多台主机并行管理; 无须安装被管理节点的客户端（no agent），且无须占用客户端的其他端口，仅仅使用ssh服务即可; 不仅仅支持python，还支持其他语言的二次开发; 不用root用户也可执行，降低系统权限.


---

## 配置 Ansible

### 控制机 (M3 MacOS)

首先安装ansible: brew install ansible

检查: ansible --version

创建Ansible 的 inventory: /etc/ansible/hosts: vim /etc/ansible/hosts

我这里进入/etc后想要创建时使用 % sudo mkdir -p /ansible, 权限问题报错. 因为 macOS（尤其是 Big Sur 以后）对系统分区做了 只读保护 (Signed System Volume, SSV)，所以你不能直接在 / 根目录下随便新建目录。解决方法很简单：不要放在 /ansible，而是放在 可写的系统配置目录 /etc/ansible，这个是允许的。退出/etc 再创建:  sudo mkdir -p /etc/ansible

创建/etc/ansible/hosts: vim hosts

```
[macs]
yrqgj ansible_host=10.0.0.224 ansible_user=lijingyi
# Ansible 的清单文件，告诉 Ansible 有哪些机器、用什么用户名连接。
# 格式是: 自定义别名 ansible_host=被控机ip ansible_user=登陆被控机的用户名                                                         
```

<figure style="text-align: center;">
<img src="/assets/img/ansible2.png" alt="" width="500">
<figcaption>/etc/ansible/hosts</figcaption>
</figure>

在系统的 /etc/hosts中添加被控机主机名映射: 

```
10.0.0.224 youruqinggaijiao.local yrqgj
# 系统用来做 IP ↔ 主机名 的解析
# 格式是: ip 主机名(.local) 自定义别名
```

<figure style="text-align: center;">
<img src="/assets/img/ansible1.png" alt="" width="500">
<figcaption>/etc/hosts</figcaption>
</figure>

至此可以测试所有ping命令, 均可以ping通:

```
ping yrqgj 
ping 10.0.0.224
ping youruqinggaijiao.local

```

<figure style="text-align: center;">
<img src="/assets/img/ansible4.png" alt="" width="500">
<figcaption>测试能否ping通</figcaption>
</figure>

测试: ansible -i /etc/ansible/hosts macs -m ping. 红字报错

<figure style="text-align: center;">
<img src="/assets/img/ansible3.png" alt="" width="500">
<figcaption>Ansible 控制机无法通过 SSH 连接到被控机的 22 端口</figcaption>
</figure>

这说明 Ansible 控制机无法通过 SSH 连接到被控机的 22 端口，不是 inventory 文件的问题。一步步排查：

**确认被控机ssh是否开启**

在 Intel Mac（被控机） 上执行：sudo systemsetup -getremotelogin

提示输入密码, 输入后显示 Remote Login: Off, 说明ssh没开启.

开启 ssh: sudo systemsetup -setremotelogin on

提示 require full disk access provileges. 这个提示是 macOS 的安全策略导致的: 从 macOS Catalina 开始，很多系统命令（包括 systemsetup）要求 Full Disk Access（完全磁盘访问权限） 才能生效，即使你是管理员也会提示权限不足。解决也很简单, 直接通过系统偏好设置开启 Remote Login 即可: 系统设置 → 共享（Sharing） → 勾选远程登录 (Remote Login).

<figure style="text-align: center;">
<img src="/assets/img/ansible5.png" alt="" width="500">
<figcaption>开启被控机ssh服务</figcaption>
</figure>

再次尝试, 会出现SSH 首次连接新主机时的安全提示. 原因是控制机第一次连接到被控机（10.0.0.224）, SSH 发现这个主机的 ED25519 公钥 在本地 known_hosts 文件里没有记录, 为了防止 中间人攻击 (MITM)，SSH 提示你确认是否信任这个主机. 

键入yes回车, SSH 会把公钥写入控制机的 ~/.ssh/known_hosts, 再次运行 Ansible 就不会提示了. 可以手动查看一下: cat ~/.ssh/known_hosts.

<figure style="text-align: center;">
<img src="/assets/img/ansible6.png" alt="" width="500">
<figcaption>成功连接被控机</figcaption>
</figure>

至此可以使用手动ssh方式登陆被控机: ssh lijingyi@10.0.0.224

<figure style="text-align: center;">
<img src="/assets/img/ansible7.png" alt="" width="500">
<figcaption>使用ssh密码登陆</figcaption>
</figure>

但是用 ansible -i /etc/ansible/hosts macs -m ping 却提示 Permission denied (publickey,password,keyboard-interactive)。这通常是因为 Ansible 没有用到你手动 ssh 时用的认证方式。手动 SSH 成功，说明系统知道用哪个私钥或密码；但 Ansible 默认可能没用到它。

注: 我使用该命令一直报错, 查阅一些教程, 发现可能是MacOS没有安装sshpass. 先安装一个看看情况: brew install sshpass. 再次尝试后发现问题解决.

<figure style="text-align: center;">
<img src="/assets/img/ansible11.png" alt="" width="500">
<figcaption>安装sshpass后解决</figcaption>
</figure>

### 免密登录

**ansible自带的密码认证参数**

在/etc/ansible/hosts文件中定义密码参数: ansible_ssh_pass=密码. 测试命令: ansible macs -m command -a "hostname" 成功输出:

<figure style="text-align: center;">
<img src="/assets/img/ansible8.png" alt="" width="500">
<figcaption>使用ansible密码参数</figcaption>
</figure>

可以将密码参数注释掉, 自行测试, 发现的确不能登入:

<figure style="text-align: center;">
<img src="/assets/img/ansible9.png" alt="" width="500">
<figcaption>如果删除ansible密码参数就不能登录</figcaption>
</figure>

此时尝试手动方式: ansible macs -m command -a "hostname" -k -uroot


<figure style="text-align: center;">
<img src="/assets/img/ansible10.png" alt="" width="500">
<figcaption>手动输入密码</figcaption>
</figure>

现在的问题是这种方法直接把机器的密码暴露了, 很不安全. 介绍另一种方法: 

**ssh无密码访问**

我这台机器已经生成密钥:

ssh-copy-id -i ~/.ssh/id_rsa.pub lijingyi@10.0.0.224

把本机的公钥 ~/.ssh/id_rsa.pub 拷贝到远程机器 10.0.0.224 的 ~/.ssh/authorized_keys 文件里，这样下次就能无密码登录。执行 ssh-copy-id 时仍需输入一次远程密码: 因为是第一次拷贝密钥，所以要验证你确实有这个账号的密码权限。输入成功后，公钥就会写入远程机 ~/.ssh/authorized_keys。运行结束后验证是否配置成功, 在本机执行：ssh lijingyi@10.0.0.224, 可以不需要密码直接登录, 至此配置成功.

注意私钥(不带.pub后缀)要保密, 不能分发.

<figure style="text-align: center;">
<img src="/assets/img/ansible12.png" alt="" width="500">
<figcaption>配置ssh免密登录</figcaption>
</figure>

使用ansible 命令 ansible -u LinuxUsername LinuxIP -m ping 测试, 可以ping通.

<figure style="text-align: center;">
<img src="/assets/img/ansible13.png" alt="" width="500">
<figcaption>ansible命令测试通过</figcaption>
</figure>

注意: 被控机不能sleep, 主机才能成功运行ansible命令.

**ssh密钥方式批量管理主机**

创建ssh密钥对:

ssh-keygen -f ~/.ssh/id_rsa -P ""  > /dev/null 2>&1

但是这个只适用于单个主机, 要同时控制多个主机, 还是需要更高效的方法.

编写公钥分发脚本.sh:


---

## ansible 模式

ansible实现批量化主机管理的模式主要有两种: 
- 利用纯命令行: ad-hoc模式
- 利用playbook剧本: playbook剧本模式

**ad-hoc**
ansible的命令行形式, 处理临时、简单操作:

- 临时批量查看被管理机器的内存情况、cpu负载情况、网络情况
- 临时分发配置文件


**playbook**

针对比较具体、比较大的任务, 使用写好的playbook剧本比较好

- 一键部署rsync备份服务器
- 一键部署lnmp环境

### ad-hoc

回顾我们使用过的测试命令: ansible macs -m command -a "hostname"

ansible有许多模块,默认是 ‘command’,也就是命令模块,我们可以通过 -m 选项来指定不同的模块. command 模块不支持 shell 变量,也不支持管道等 shell 相关的东西.如果你想使用 shell相关的这些东西, 请使用’shell’ 模块. 使用 shell 模块的示例如下:

$ ansible raleigh -m shell -a 'echo $TERM'

ansible -h查看所有参数:

<figure style="text-align: center;">
<img src="/assets/img/ansible14.png" alt="" width="500">
<figcaption>ansible -h 查看所有参数</figcaption>
</figure>

ansible-doc -l 列出所有支持的模块(可以使用管道符筛选):

<figure style="text-align: center;">
<img src="/assets/img/ansible15.png" alt="" width="500">
<figcaption>ansible-doc -l 列出所有支持的模块</figcaption>
</figure>

ansible-doc -s command 列出具体模块用法:

<figure style="text-align: center;">
<img src="/assets/img/ansible16.png" alt="" width="500">
<figcaption>ansible-doc -s command 列出具体模块用法</figcaption>
</figure>

