---
layout: post
title: Multi-LiDAR 外参自动标定算法
date: 2025-02-19
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: livox.png # Add image post (optional)
tags: [Blog, LiDAR]
author: # Add name author (optional)
---

无人驾驶中感知模块负责获取和理解其周围的场景信息，其性能和可靠性是整个无人驾驶系统的关键环节之一，直接影响下游的定位、路线规划和决策等控制链。通过融合多种感知传感器的数据，提高系统在复杂场景下的感知能力是无人驾驶发展的主要方向。然而无论是摄像头、毫米波雷达还是激光雷达，都有自己的坐标系，即传感器产生的数据都是基于自身坐标系的。将各传感器转换到统一坐标系的过程便是传感器的外参标定。

而激光雷达点云数据包含以自身为参考原点的物体3D坐标信息。当多个雷达拼接以获得更大范围3D覆盖时，通过外参将各个激光雷达统一到全局坐标系，便能把各个雷达的点云很好地拼接起来。

## 手动外参标定

通过Livox View自带的标定工具可实现多个激光雷达之前的外参标定，关键技巧是要找到一处视野开阔的环境，并且在不同雷达FOV交集处有较规整醒目的建筑或物体 (下文用A表示此物体)。

首先用Livox Viewer采集一帧较长积分时间的A点云数据，然后观察各个激光雷达在其FOV里所形成的A点云，微调Livox Views标定工具里的滚轮控件（调节6个变量[x,y,z,roll,pitch,yaw]），使得各FOV里A点云能完美重叠在一起为佳，此时得到的参数即为所需外参。按此方法标定的精度误差可小于0.1度。

<figure style="text-align: center;">
<img src="/assets/img/lidar1.png" alt="手动外参标定" width="300">
<figcaption>手动外参标定</figcaption>
</figure>

不难看出，此方法依赖于多雷达的共视区域，精度和效率与使用者的熟练度正相关，存在一定的局限性。

简单粗暴: 就是手搓.

## 自动外参标定

在实际使用中，有时不方便找到用于标定的开源环境或参考物体，为此Livox推出了自动标定技术[TFAC-Livox][TFAC-Livox]算法(Target-Free Automatic Calibration)并在Github上开源。该技术主要依靠几何一致性假设，即多个雷达扫描出来的局部三维模型是一致的，通过对基准雷达(LiDAR0)进行移动建图，然后将其余雷达数据对LiDAR0的重建地图不断进行迭代配准与计算，依靠一致性假设不断减少匹配误差，直到算法收敛并且满足标定矩阵刚性不变特性（六条平行线），最后用一致性算法得出最终标定矩阵（外参）。

[TFAC-Livox]: https://github.com/Livox-SDK/Livox_automatic_calibration

### 适用硬件
- 根据官方文档, 适用于Mid，Horizon系列激光雷达。

### 编译
- 依赖库: Cmake, PCL1.7, Eigen. 建议直接安装ROS，包含了以上的库
   ```
   sudo apt-get install ros-kinetic-cv-bridge ros-kinetic-tf 
   ros-kinetic-message-filters ros-kinetic-image-transport
   ```

- 编译
   ```
   mkdir build
   cd build
   cmake ..
   make
   ```

编译完成后，在build目录下会生成生成三个文件，分别是mapping, calibration, fitline
  - mapping: 可视化建图工具　
  - calibration:  可视化自动标定工具
  - fitline: 拟合标定参数，计算最终参数矩阵

### 运行
   - 数据准备: 准备双雷达标定pcd数据:
      - 基准雷达数据放在 'data/Base_LiDAR_Frames/.pcd' (以 100000.pcd 作为第一帧文件名，后续帧往上累加)
      - 待标定雷达数据放在 'data/Target_LiDAR_Frames/.pcd' (以 100000.pcd 作为第一帧文件名，后续帧往上累加)
      - 粗配准外参矩阵放在 'data/Init_Matrix.txt'

   注意：基准雷达数据和待标定雷达数据需要尽可能在时间上同步，文件名和时间戳为同步对应。(这句是官方文档说法, 但是根据我的理解应该是需要先做[时间同步][Time Synchronization], 链接是官方的一套非常完整的步骤.)

   示例数据下载: 
   [待标定][target]
   [基准][base]

[Time Synchronization]: https://livox-wiki-cn.readthedocs.io/zh-cn/latest/tutorials/other_product/timestamp_sychronization.html
[target]: https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Showcase/Target-LiDAR-Frames.tar.gz
[base]: https://terra-1-g.djicdn.com/65c028cd298f4669a7f0e40e50ba1131/Showcase/Base_LiDAR_Frames.tar.gz

   - 运行

      ```
      cd livox_calibration
      cp run.sh build/
      cd build
      sh run.sh
      ```

   脚本首先启动可视化建图程序mapping，用基准雷达建立子地图，自动生成待匹配地图数据H-LiDAR-Map-data.pcd文件。建立完成后启动标定程序calibration，完成标定参数估计工作，最后启动参数拟合器fitline，完成最终参数矩阵计算。

<figure style="text-align: center;">
<img src="/assets/img/lidar_imatrix.png" alt="官方的粗配准外参矩阵" width="700">
<figcaption>官方的粗配准外参矩阵</figcaption>
</figure>

  注: 我运行到这里报错, 因为没有生成 H_LiDAR_Map data.pcd 文件, 暂时未知原因.(2025-03-01)

<figure style="text-align: center;">
<img src="/assets/img/lidar-error1.png" alt="Couldn't read H_LiDAR_Map" width="600">
<figcaption>Couldn't read H_LiDAR_Map</figcaption>
</figure>

除了没有生成 H_LiDAR_Map data.pcd, 新生成一个 T_Matrix.txt, 我理解如果成功配准, 这个就是最终的转移矩阵. 因为目前没有成功配准, 所以里面是空的. 我又自己新建了一个 H_LiDAR_Map 文件夹, 放了一个pcd文件, 测试下这样能不能跑通, 毕竟理论上有pcd就行. 再次运行后报错是 X Server没有配置. 因为我之前自己配ros的时候也出现过类似问题, ros测试的turtle窗口出不来, 查了下发现应该是MAC系统的关系, 于是在另一个容器里配置了一个 X Quarter, 就能成功显示了. 不知道这里是否是相同的问题. (2025-03-10)

<figure style="text-align: center;">
<img src="/assets/img/lidar_error2.png" alt="bad X server connection" width="600">
<figcaption>bad X server connection</figcaption>
</figure>

参考下面项目文件夹结构, /build 里面的 calibration(标定程序), mapping(建图程序), fitline(参数拟合器)是运行生成的. /data中需要自己放基准点云、待配准点云; parameters.txt应该是,init_Matrix.txt就是粗配准外参矩阵; H-Lidar-Map-Data是上面提到出现问题的地方, 这里是我自己新建的, 事实上应该自动生成.

<figure style="text-align: center;">
<img src="/assets/img/lidar_folder.png" alt="文件夹" width="600">
<figcaption>文件夹</figcaption>
</figure>

下面是官方的运行结果:
<figure style="text-align: center;">
<img src="/assets/img/livox_cali.png" alt="样例数据的自动标定结果输出" width="600">
<figcaption>样例数据的自动标定结果输出</figcaption>
</figure>

考虑到应该跟容器关系不大, 所以很大可能是我的系统问题.

### 一些注意点
  - 必须保证双雷达数据同步
  - 基准雷达建图必须尽可能准确
  - 采集车、平台运动必须尽可能缓慢，数据建议进行运动畸变修正以保证最终的精度
  - 粗配准外参数矩阵不必要很精准，但需要大致能够对齐，尽可能保证最终的精度。
  - 对于Mid-40, Horizon型号，转换的PCD文件参照100ms为一帧。

### 采集自己的标定数据
  - 在移动采集数据期间，需要保证基准雷达LiDAR0在移动的时间段t内扫描的区域（重建的地图）能够被其余雷达所探测，需要保证最小的探测盲区。建议采用原地旋转或者”0”字形轨迹运动进行完全的场景扫描。

  - 采集数据的环境，尽量选用宽敞的室内或者地下车库，能够保证有较好的地图重建精度，地图完整度与特征丰富度（需注意Livox的探测盲区问题）。避免选用室外空旷，无明显几何结构特征且移动目标（车辆行人）较多的场景。采集数据时候避免四周有移动物体（注意切勿有人在围观或者跟随运动）。否则容易导致建图失败或者建图误差过大，影响后续的配准标定。

  - 移动采集时尽量保证运动的缓慢，特别时是转弯处，遵循慢速、大半径过弯原则，最小化运动畸变。

  - 传感器数据要保证同步，建议采用Livox HUB进行数据的获取。

  - 雷达的安装不局限于有重叠可视区域，可以任意安装，只要能够保证获取外参初值即可。

  - 采集格式无要求，可以是rosbag或者lvx，只需要能够按每帧100ms转换为多帧pcd文件即可。

## 总结: 自动标定过程

   - 找到合适的场地，确定标定的路线，软硬件的准备。因为我们需要提供一个外参的初值（重要！），有两种方式，第一是直接把外参初值写在雷达中然后采数据，这样获得的点云数据直接是带有外参初值的，程序中使用的初值提供单位矩阵即可；第二是把雷达中的外参清空后采数据，这样点云数据是雷达自身坐标系下的，然后在程序中对应的地方提供初值外参矩阵即可，这里外参初值获取可以用机械设计参考值或者手工测量值。

   - 开始录制对应的rosbag或者lvx，注意不同的雷达数据需要保存不同的topic。所以在录制rosbag或者在lvx转rosbag的时候，需要在对应的launch文件（比如录制是livox_hub_rviz.launch；转换是lvx_to_rosbag.launch）里面把 multi_topic 参数设置成1，这样可以把不同的雷达数据保存成不同的topic，或者把一个lvx文件中不同的雷达保存成不同的topic。开始录制后开始缓慢的走一圈标定路线，走完后结束录制即可。

   - 将雷达数据转化成对应的一帧一帧pcd文件（lvx可以通过lvx_to_rosbag.launch转换，参考 https://github.com/Livox-SDK/livox_ros_driver ），注意两个雷达之间需要时间同步，同样名称的pcd文件需要对应同一个时刻的数据。然后根据readme文档里面的要求把对应的pcd文件放在不同的文件夹下然后执行程序即可。

   - 编译，运行代码，输出最终标定结果。
  
2. 标定结果验证
   - 方法一: 两雷达存在重叠区域（overlap）情况，可以在标定结束，参数写入后，用livox viewer观察overlap区域是否存在错层，如果错层较大，说明标定结果错误，建议修改外参初值，确认地图建立的精度以后，重新进行标定和验证。
   - 方法二: 两雷达无overlap情况，将target雷达的点云使用标定结果外参旋转后，融合到base雷达点云（merge操作）。将融合后的点云存为pcd，运行mapping节点进行建图，观察建图结果。如果建图结果存在错层，说明标定结果错误，建议修改外参初值，确认地图建立的精度以后，重新进行标定和验证。