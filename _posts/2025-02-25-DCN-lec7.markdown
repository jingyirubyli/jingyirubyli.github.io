---
layout: post
title:  DCN Lec7-Software-defined Networking
date:   2025-02-25
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: post-7.png # Add image post (optional)
tags: [Blog, DCN]
author: # Add name author (optional)
---
# 本讲内容

2007年，斯坦福大学的学生Martin Casado 领导了一个关于网络安全与管理的项目Ethane，该项目试图通过一个集中式的控制器，让网络管理员可以方便地定义基于网络流的安全控制策略，并将这些安全策略应用到各种网络设备中，从而实现对整个网络通讯的安全控制。

2008年，基于Ethane 及其前续项目Sane的启发， Nick McKeown 教授等人提出了OpenFlow 的概念，并于当年在ACM SIGCOMM 发表了题为《OpenFlow: Enabling Innovation in Campus Networks》的论文，首次详细地介绍了OpenFlow 的概念。该篇论文除了阐述OpenFlow 的工作原理外，还列举了OpenFlow 几大应用场景。

基于OpenFlow 为网络带来的可编程的特性，Nick McKeown教授和他的团队进一步提出了SDN（Software Defined Network，软件定义网络）的概念。2009年，SDN 概念入围Technology Review年度十大前沿技术，自此获得了学术界和工业界的广泛认可和大力支持。

全球第一台路由器 是由斯坦福大学的 莱昂纳德·波萨克 夫妇创造的，用于斯坦福校内网络，全球网络行业的领头羊思科Cisco就是这对夫妇创建的；无独有偶，20年后，仍然是斯坦福大学，开创了SDN/Openflow的基础。

SDN/Software Defined Network 软件定义网络，是一种网络设计理念。或者是一种推倒重来的理念：网络设备可以集中式软件管理，可编程化，控制转发层面分开。

SDN三层模型：应用层，控制层，转发层。交换机没有“大脑”，即区别传统网络的交换机/路由器需查找MAC表/路由表，仅具备转发功能；所有的路径计算，安全策略等等全部在控制器上面计算；然后通过Openflow 协议下放给交换机；交换机根据流表(Flow Table) 进行转发。

所以说，SDN并不是一项网络技术，也不是一个协议，而是一种思想，一种框架。

举个例子：你在PC上写了一个python的脚本，通过北向接口API在控制器上面执行该脚本；控制器执行OpenFlow协议，通过南向接口应用到转发层的交换机上面；交换机傻傻的通过流表来进行转发。

狭义上的SDN：软件定义网络。广义上的SDN：软件定义安全，软件定义存储，软件定义数据中心等等。可以说SDN是一个浪潮，席卷了整个的IT行业。

---

# SDN的目标: Make Enterprise Networks easier to Manage

![图片alt](/assets/img/l7p1.png "Enterprise vs. Datacenter Networks")

企业网络的问题: 企业网络是异构的 Heterogeneous
- 不同供应商的各种硬件上存在各种协议
- 难以执行全网策略network-wide policies！
  - 使用供应商特定的命令手动配置交换机
  - 需要调整许多单独的旋钮；因此很容易出现配置错误！
    - 多供应商网络中 62% 的网络停机时间来自人为错误
    - 80% 的 IT 预算用于维护和运营

Prior Solutions for Enforcing Network-wide Policies
- 将中间盒放置在网络瓶颈处以施加控制
  - 限制：流量可能会绕过中间盒；不再执行政策
- 在顶部添加新的协议层以施加控制
  - 例如，访问控制列表（例如，阻止具有特定源 IP 的数据包）
  - 限制：没有解决根本原因；掩盖问题而不是解决问题. 例如，如果用户更改其 IP 地址会怎样？

---

# [Ethane][ethane]

[ethane]: https://slideplayer.com/slide/13186511/

## Three Principles

- “网络应由通过高级名称声明的策略进行管理”“The network should be governed by policies declared over high-level names”
  - 使用用户名或主机名而不是动态分配的地址来表达规则
- “策略应确定数据包所遵循的路径”“Policy should determine the path that packets follow”
  - 例如，强制访客主机通过防火墙
- “网络应强制数据包与其来源之间的强绑定”“The network should enforce a strong binding between a packet and its origin”
  - 即使用户在主机之间移动，也保持一致的（用户、主机、地址）(user, host, address)绑定

## Ethane Design

Goal: **Abstract the entire network as a simple programmable entity**

Two Key Ideas:
- 使交换机变得非常简单
  - 简单的转发设备
- 中央控制器central controller — 网络的“大脑”
  - 具有整个网络的全局视图
  - 网络中的所有通信都需要控制器的许可
  - 通过要求身份验证将每个用户绑定到主机和地址
  - 根据指定的策略计算路由并在交换机中安装转发规则

Ethane 与传统网络最大的不同是**控制平面**和**转发平面**分离；控制层实施集中式控制，可编程化，可视化，自动化等策略，转发层通过流表和硬件进行快速转发。

### How Ethane Works?五项基本活动：
- Registration
  - **所有用户、主机和交换机都向控制器注册以加入网络**
    - 因此控制器可以全局查看网络中所有实体！
  - 注册是一个被动步骤 **passive** step
    - 不足以通过网络发送/接收数据！
    - 需要进一步的身份验证才能发送/接收数据
- Bootstrapping
  - 交换机创建以控制器为根的生成树
  - 交换机建立到控制器的安全通道
  - 交换机定期向控制器发送邻居信息
    - 这样，控制器始终可以查看最新的网络拓扑
- Authentication
  - **网络实体上线所需**
    - 以便它们可以发送/接收数据
  - 交换机使用注册期间提交的预配置证书pre-configured certificates进行身份验证
  - 主机通过向控制器发送包含硬件地址的 DHCP 请求(DHCP request)进行身份验证。控制器根据注册地址检查地址，并分配 IP 地址
  - 用户可以使用企业登录凭据enterprise login credentials（例如，Web 登录表单 login form）
  - A **Host → IP → User** binding is created
- Flow setup
  - 用户 A 想要向用户 B 发送数据包
  - 最初，交换机 1 没有转发条目forwarding entry，因此数据包被转发到控制器
  - 控制器检查网络策略**network policy**是否允许用户 A 与用户 B 通信
  - 如果允许，控制器会在路由沿线的所有交换机中安装转发规则
- Forwarding
  - 如果控制器允许该路径，数据包将被发回交换机 1，然后交换机 1 使用控制器安装的转发规则转发数据包
  - 从 A 到 B 的所有后续数据包subsequent packets都将由交换机转发；无需再转到控制器
  - 转发表条目Forwarding table entries通过不活动超时inactivity timeout或由控制器controller清除

### Ethane Controller : Fault Tolerance

控制器是故障的中心点,使用控制器的备份副本backup replicas提供容错能力.

维护备份副本的三个选项：
- Cold standby
  - Backups contain registration and policy information but lack the (user, host, address) bindings
  - 在主控制器发生故障时选择 ID 最低的备份控制器
  - **最不复杂，但故障后收敛时间最长**
- Warm standby
  - Backups contain binding information with weak consistency
    - 即，不同的备份控制器可能具有不同的绑定元组子集subsets of binding tuples
    - 但没有不一致的信息
  - **更复杂，但从故障中恢复更快**
- Fully replicated
  - 多个活动控制器各自保持相同状态
  - 交换机将每个请求分发到所有控制器（主控制器和备份控制器primary and backups）
  - 使用基于gossip协议gossip-based protocol来保持一致的事件顺序
  - **最复杂，但故障恢复速度最快**

**Trade-off: System complexity vs. time to recover**

### Ethane Policy

- Policy specification language called **Pol-Eth**.
- Each condition is a **conjunction of predicates**谓词的组合 which specify the properties a flow must have for a certain action.
- 例如，允许从源用户“bob”到目标主机“websrv”的 HTTP 流

<figure style="text-align: center;">
<img src="/assets/img/l7p2.png" alt="Policy Ex." width="600">
<figcaption>Policy Ex.</figcaption>
</figure>

- 编译器compiler将策略编译成交换机中的转发规则

### Ethane Switch
- Ethane switches use a **“Flow Table”**流表 for forwarding.
- 该策略被编译成流表的“匹配操作”规则集“Match-Action” rules
    - **Match匹配**数据包头packet header和元数据字段metadata fields的（子集）
    - 采取一些**操作action**，例如，转发到输出端口 1、丢弃

<figure style="text-align: center;">
<img src="/assets/img/l7p3.png" alt="A Flow Table" width="600">
<figcaption>A Flow Table</figcaption>
</figure>

下图比较Ethane Switch和Traditional Switch. 其中画圈部分被移到控制器controller处理.
<figure style="text-align: center;">
<img src="/assets/img/l7p4.png" alt="Ethane Switch vs. Traditional Switch" width="600">
<figcaption>Ethane Switch vs. Traditional Switch</figcaption>
</figure>

### Ethane Summary

- **Ethane 旨在通过以下方式使网络更易于管理：**
  - 利用集中控制方案**centralized**
    - 使交换机变得非常简单（仅执行转发）...
    - 通过将控制平面逻辑control plane logic转移到中央控制器**central controller**, 使编程和执行全局策略变得容易
- **Ethane 与传统的分布式网络架构截然不同**

---

# OpenFlow: Communication b/w Controller & Switch

Motivation: Ethane网络需要控制器与交换机通信以填充转发规则。我们需要控制器和交换机之间的通信协议。一开始，每个交换机供应商都设计了自己的协议来安装交换机转发规则, 导致网络运营商需要了解每个交换机供应商的规范,还需要针对不同供应商的不同交换机修改控制平面应用程序。OpenFlow 定义了一种可编程网络协议programmable network protocol, 该协议可以帮助管理路由器和交换机，无论底层路由器或交换机由哪家供应商制造。

OpenFlow Switch至少包含三个部分：
- **A Flow Table/流表**：与每个条目关联的操作
- **A Secure Channel/安全通道**：将交换机与控制器连接起来
- **The OpenFlow Protocol/OpenFlow 协议**：控制器与交换机通信并填充流表条目的开放标准接口

<figure style="text-align: center;">
<img src="/assets/img/l7p6.png" alt="OpenFlow Switch" width="600">
<figcaption>OpenFlow Switch</figcaption>
</figure>

---

# SWAN: An Application of SDN

## Inter-DC Wide Area Network (WAN)

<figure style="text-align: center;">
<img src="/assets/img/l7p7.png" alt="Inter-DC Wide Area Network (WAN)" width="600">
<figcaption>Inter-DC Wide Area Network (WAN)</figcaption>
</figure>

### WAN Traffic
- 将用户数据（例如电子邮件、文档、音频/视频）复制到远程 DC 以实现可用性/持久性
- 通过固有分布式数据源进行计算的远程存储访问
- 跨 DC 的大规模数据同步和状态复制

这三条从上到下, 越来越不latency sensitive, 而volume越来越大.

### WANs are very inefficient! 广域网效率低下的原因分析.
1. 服务间缺乏协调/Lack of co-ordination between services

<figure style="text-align: center;">
<img src="/assets/img/l7p8.png" alt="WANs" width="600">
<figcaption>WANs</figcaption>
</figure>

图示中, 峰值与均值利用率差异显著:峰值与平均链路利用率比值为2.17. 链路带宽需按峰值需求配置（如100%容量）。但实际平均利用率仅为46%（均值≈峰值/2.17）。大部分时间内链路处于低负载状态，导致带宽资源浪费和成本增加。有没有更好的方法? 

链路承载来自不同服务的流量. 流量类型差异会导致资源冲突. 我们将流量分为两类: 
- 背景流量（Background Traffic）
  - 特点：延迟容忍型（如备份、软件更新），可灵活调整传输时间。 **delay-tolerant**
  - 存在的问题：若无协调，可能占用链路资源，挤压实时流量。
- 非背景流量（Non-background Traffic）
  - 特点：延迟敏感型（如视频会议、实时交易），需稳定带宽和低延迟。 **delay-sensitive**
  - 问题：峰值时段与非关键流量竞争带宽，导致拥塞或性能下降。

那么我们能够协调不同的服务吗？

- **Provision only for peak non-background traffic**（仅为非背景流量的峰值需求配置带宽）
  - 含义：
    - 根据非背景流量（如视频会议、实时交易）的历史峰值需求，预先分配足够的带宽资源。
    - 例如：若峰值需求为 1Gbps，则链路总带宽至少配置 1Gbps。
  - 优势：
    - 避免关键流量在高峰期因带宽不足而丢包或延迟；
    - 减少因过度配置带宽导致的长期成本浪费。
  - 挑战：
    - 需精准预测峰值（若低估会导致拥塞，高估则浪费资源）；
    - 依赖动态监控工具实时调整流量优先级。
- **Background traffic only uses spare bandwidth**（背景流量仅使用空闲带宽）
  - 含义：
    - 背景流量（如数据备份、软件更新）仅在链路未被非背景流量占用时传输；
    - 若非背景流量占用带宽，背景流量自动降速或暂停。
  - 实现方式：
    - 智能调度算法：实时监测链路利用率，动态分配剩余带宽给背景流量；
    - QoS策略：为背景流量标记低优先级（如 DSCP 中的 Best Effort 类别）。
  - 优势：
    - 最大化链路利用率，空闲时段高效传输非关键数据；
    - 避免背景流量与实时流量竞争资源。
  - 挑战：
    - 需网络设备支持流量分类和动态带宽调整（如 SD-WAN 技术）；
    - 背景流量可能因频繁中断导致传输时间延长。

<figure style="text-align: center;">
<img src="/assets/img/l7p9.png" alt="co-ordinate between diﬀerent services" width="600">
<figcaption>co-ordinate between diﬀerent services</figcaption>
</figure>

2. 本地、贪婪、资源分配/Local, Greedy, Resource Allocation

例如: Flows arrive in the order: F<sub>A</sub>(R1 → R6), F<sub>B</sub>(R3 → R6), F<sub>C</sub>(R4 → R6)

<figure style="text-align: center;">
<img src="/assets/img/l7p10.png" alt="Local, Greedy Path Selection " width="400"><img src="/assets/img/l7p11.png" alt="Global, Optimal Path Selection" width="400">
<figcaption>Path Selection</figcaption>
</figure>

优化目标:
  - First order objective: Maximize throughput for each flow
  - Second order objective: Minimize latency for each flow

## SWAN: Software-driven WAN 软件驱动广域网

两个关键设计元素：
  - 协调服务的发送速率
  - 集中资源分配

**使用中央控制器central controller实现两个目标**

<figure style="text-align: center;">
<img src="/assets/img/l7p12.png" alt="Uses a central controller to achieve both goals" width="600">
<figcaption>Uses a central controller to achieve both goals</figcaption>
</figure>

SWAN Workflow
- 控制器计算每个服务的发送速率
  - 简化为众所周知的理论问题 - 路径约束Path-constrained, 多商品流问题Multi-commodity Flow Problem
- 控制器还计算每个流的最佳路径
  - 例如，不相交路径以避免拥塞
  - 相应地配置每个交换机，例如使用 OpenFlow
  - 随着新流到达，配置会动态更新
    - 可能需要将现有流移动到不同的路径
    - 可能导致暂时拥塞
  
例: 如图, 假设有一些新的流量到达，现在我们必须将绿色流量和蓝色流量移至新路径

<figure style="text-align: center;">
<img src="/assets/img/l7p13.png" alt="How to move?" width="600">
<figcaption>How to move?</figcaption>
</figure>

按照一般的考虑方法, 先把绿色F<sub>B</sub>移到目标位置, 再移动蓝色F<sub>A</sub>: 造成堵塞.

<figure style="text-align: center;">
<img src="/assets/img/l7p14.png" alt="First move the green flow, then the blue flow" width="600">
<figcaption>First move the green flow, then the blue flow</figcaption>
</figure>

同样如果先把蓝色F<sub>A</sub>移到目标位置, 再移动绿色F<sub>B</sub>: 也会造成堵塞.

Idea: 在每个link上保留 **s** 的临时容量: Scratch capacity (s) of 0.5

先将蓝色F<sub>A</sub>的一半移动到目标link, 此时蓝色F<sub>A</sub>与绿色F<sub>B</sub>发生少量堵塞; 再将绿色F<sub>B</sub>全部移动到目标link, 此时堵塞发生在上面link; 再将还未移动的一半蓝色F<sub>A</sub>移到目标link; 完成move, 堵塞消失.

<figure style="text-align: center;">
<img src="/assets/img/l7p5.png" alt="Congestion-free Network Updates" width="600">
<figcaption>Congestion-free Network Updates</figcaption>
</figure>

