---
layout: post
title: PageRank
date: 2025-03-01
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: pagerank.png # Add image post (optional)
tags: [Blog, Network]
author: # Add name author (optional)

---
## 基本概念

### 背景

[PageRank][PageRank] 算法由 Google 创始人 Larry Page 在斯坦福读大学时提出，又称 PR，佩奇排名。主要针对网页进行排名，计算网站的重要性，优化搜索引擎的搜索结果。PR 值是表示其重要性的因子。

[PageRank]: https://en.wikipedia.org/wiki/PageRank

### 算法思想

- 数量假设: 当在网页模型图中，一个网页接受到的其他网页指向的入链（in-links）越多，说明该网页越重要。
- 质量假设: 当一个质量高的网页指向（out-links/出链）一个网页，说明这个被指的网页重要。
- 出链入链

<figure style="text-align: center;">
<img src="/assets/img/pr1.png" alt="出链/入链" width="400">
<figcaption>出链/入链</figcaption>
</figure>

---

## 算法

### 基本公式

<figure style="text-align: center;">
<img src="/assets/img/prfml1.png" alt="基本公式" width="200">
<figcaption>基本公式</figcaption>
</figure>

- PR(a)<sub>i+1</sub>: 表示当前节点/网页PR值，
- PR(T<sub>i</sub>)<sub>i</sub>: 表示其他节点(指向a)/网页PR值，
- L(T<sub>i</sub>)表示其他节点/网页T<sub>i</sub>的出链数量, 
- i 为循环次数.

举例: 

<figure style="text-align: center;">
<img src="/assets/img/pr3.png" alt="例" width="200">
<figcaption>例</figcaption>
</figure>

当i=0时，初始化的PR值为 1/N = 1/4, 其中N为网页总数，即每个网页一样重要。图中A, B, C, D为互相指向的网页, 初始化PR值均为1/4。利用PageRank公式进行更新PR值。（因PR值只更新一次不稳定，需多次更新）

i = 1: 

<figure style="text-align: center;">
<img src="/assets/img/prfml2.png" alt="计算PR(A)<sub>1</sub>" width="400">
<figcaption>计算PR(A)<sub>1</sub></figcaption>
</figure>

<figure style="text-align: center;">
<img src="/assets/img/prfml3.png" alt="计算PR(B)<sub>1</sub>" width="300">
<figcaption>计算PR(B)<sub>1</sub></figcaption>
</figure>

以此类推，迭代求得所有网页的PR值，并根据PR值进行排序，得到结果如下。

| PR Value   | PR(A) | PR(B) | PR(C) | PR(D) |
| --- | --- | --- | --- | --- |
| i=0 \PR 初始化为1/N | 1/4 | 1/4 | 1/4 | 1/4 |
| i=1 | 3/8 | 1/8 | 3/8 | 1/8 |
| rank | 1 | 2 | 1 | 2 |

### 矩阵化表达(使用转移概率矩阵/Marcov矩阵)

将PR值转为矩阵（便于计算,及更新PR值）: 第i列的j个元素分别表示从节点i跳到其他第j个节点的概率. 如从A跳转到B或C的概率均为1/2, 从D将跳转到 A 的概率为 1。（矩阵的列表示出链）

<figure style="text-align: center;">
<img src="/assets/img/prfml4.png" alt="将PR值转为矩阵" width="150">
<figcaption>将PR值转为矩阵</figcaption>
</figure>

通过矩阵化表达,可以简化PR值的计算:

<figure style="text-align: center;">
<img src="/assets/img/prfml5.png" alt="通过Marcov矩阵计算PR值" width="100">
<figcaption>通过Marcov矩阵计算PR值</figcaption>
</figure>

其中M为当前PR值矩阵化表达，V为上一次得到的PR值。

同样求上例中i=1时的PR值:

<figure style="text-align: center;">
<img src="/assets/img/prfml6.png" alt="通过矩阵计算i=1时的PR值" width="300">
<figcaption>通过矩阵计算i=1时的PR值</figcaption>
</figure>

i=2时的PR值(计算完成后排名变成A, C, B, D):
<figure style="text-align: center;">
<img src="/assets/img/prfml7.png" alt="通过矩阵计算i=2时的PR值" width="300">
<figcaption>通过矩阵计算i=2时的PR值</figcaption>
</figure>

根据PR = M*V不断迭代，经过多次迭代后所生成的列向量为网页最终的PR值。

### 两种方式的关系

<figure style="text-align: center;">
<img src="/assets/img/pr6.png" alt="两种方式的关系" width="600">
<figcaption>两种方式的关系</figcaption>
</figure>

---

## 存在的问题以及修正

### Dead Ends

1. 产生原因

那些没有指向其他页面的网页（出链为空的节点）。Dead Ends 会导致网站权重变为 0。B没有任何出链（out-links）这就是 Dead Ends，Dead Ends 会导致网站权重变为 0。例如:

<figure style="text-align: center;">
<img src="/assets/img/pr7.png" alt="Dead Ends例" width="200">
<figcaption>Dead Ends例</figcaption>
</figure>

计算PR值:

<figure style="text-align: center;">
<img src="/assets/img/prfml8.png" alt="多次循环后模型中所有的 PR 值都会归于 0" width="300">
<figcaption>多次循环后模型中所有的 PR 值都会归于 0</figcaption>
</figure>

2. 解决方法: Teleport/随机跳转

在 PageRank 计算过程中，允许一定概率的随机跳转（通常是 15%），即用户有概率从任何页面跳转到其他任意页面，从而避免死胡同的问题。

<figure style="text-align: center;">
<img src="/assets/img/prfml9.png" alt="修正M<sup>*</sup>" width="150">
<figcaption>修正M<sup>*</sup></figcaption>
</figure>

- a = [a<sub>0</sub>, a<sub>1</sub>,..., a<sub>n</sub>]，当有一列全为时（即该节点无出链），a<sub>i</sub> = 1，其他时候 a<sub>i</sub> = 0
- e：由 1 填满的列矩阵
- n：M 矩阵的行数/列数

<figure style="text-align: center;">
<img src="/assets/img/prfml10.png" alt="" width="300"><img src="/assets/img/prfml11.png" alt="" width="400">
<figcaption><sup>*</sup></figcaption>
</figure>

3. Dead Ends 问题修正公式

<figure style="text-align: center;">
<img src="/assets/img/prfml12.png" alt="Dead Ends 问题修正公式" width="300">
<figcaption>Dead Ends 问题修正公式<sup>*</sup></figcaption>
</figure>

### Spider Traps

1. 产生原因

Spider Traps（蜘蛛陷阱） 是指一组网页形成一个循环链接结构，使得 PageRank 过度集中在这些页面上，而难以传播到整个网络, 导致网站权重变为向一个节点偏移。A 节点与其他节点之间无 out-links，这就是 Spider Traps，这将会导致网站权重变为向一个节点偏移。例如:

<figure style="text-align: center;">
<img src="/assets/img/pr8.png" alt="Spider Traps例" width="200">
<figcaption>Spider Traps例</figcaption>
</figure>

按照这个规律，我们在多次循环之后，会发现这个模型中 A 的 PR 值都会归于 1，其他归为 0。即当网络中存在，只有自己指向自己时，PR值在更新过程中，含有自指向结点的PR值会逐渐归于1，其他结点归于0，此为Spider Traps问题。

| **PR值**            | **PR(A)** | **PR(B)** | **PR(C)** |
|---------------------|-----------|-----------|-----------|
| i=0 \PR 初始化为1/N | 1/3       | 1/3       | 1/3       |
| i=1                 | 2/3       | 1/6       | 1/6       |
| i=2                 | 5/6       | 1/12      | 1/12      |
| i=3                 | 11/12     | 1/24      | 1/24      |
| i=n                 | 1         | 0         | 0         |

2. 解决方法: Random Teleport

步骤1：列转移概率矩阵：即B出链，指向其他结点的概率。 将列转移概率矩阵设为M矩阵。例

<figure style="text-align: center;">
<img src="/assets/img/prfml13.png" alt="将列转移概率矩阵设为M矩阵" width="200">
<figcaption>将列转移概率矩阵设为M矩阵</figcaption>
</figure>

步骤2：修正M

<figure style="text-align: center;">
<img src="/assets/img/prfml14.png" alt="修正M" width="200">
<figcaption>修正M</figcaption>
</figure>

- \beta: 跟随出链（out-links）打开网页的概率，一般设为 0.8 ~0.9 之间
- 1-\beta: 随机跳到其他网页的概率，例如：浏览 a 的时候，有一定概率会打开 b 或 c
- ee<sup>T</sup>: 由 1 填满的 n × n 矩阵
- n: M 的行数/列数。

如果我们设置上例中\beta=0.85, 则计算M<sup>*</sup>:

<figure style="text-align: center;">
<img src="/assets/img/prfml15.png" alt="M<sup>*</sup>" width="400">
<figcaption>修正M<sup>*</sup></figcaption>
</figure>

3. Spider Traps 问题修正公式
















---

## PageRank 的优缺点

1. 优点
  - 通过网页之间的链接来决定网页的重要性，一定程度消除了人为对排名的影响。
  - 离线计算 PageRank 值，而非查找的时候计算，提升了查询的效率。
2. 缺点
  - 存在时间越长网站，PageRank 值会越来越大，而新生的网站，PageRank 值增长慢。
  - 非查询相关的特性，查询结果会偏离搜索内容。
  - 通过“僵尸”网站或链接，人为刷 PageRank 值。



## 代码实现

