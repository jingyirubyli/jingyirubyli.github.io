---
layout: post
title:  nginx和钓鱼网站
date:   2025-08-15
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: nginx.png # Add image post (optional)
tags: [Blog]
author: # Add name author (optional)
---
# 本讲内容

Web 网络服务是一种被动访问的服务程序，即只有接收到互联网中其他主机发出的 请求后才会响应，最终用于提供服务程序的Web 服务器会通过 HTTP（超文本传输协议））或 HTTPS（安全超文本传输协议）把请求的内容传送给用户。
目前能够提供 Web 网络服务的程序有 II5、Nginx 和 Apache 等。其中，IIS（Iinternet Information Services，互联网信息服务）是Windows 系统中默认的Web 服务程序. 
2004年10月4日，为俄罗斯知名门户站点而开发的 Web 服务程序 Nginx 横空出世。Nginx 程序作为一款轻量级的网站服务软件，因其稳定性和丰富的功能而快速占领服务器市 场，但 Nginx 最被认可的还当是系统资源消耗低且并发能力强，因此得到了国内诸如新浪、网易、腾讯等门户站的青睐。

web服务器(nginx): 接受http请求并返回数据

web框架(django, flask): 开发web应用程序, 处理接收到的数据.

## nginx 安装与简单熟悉

### Homebrew 安装 nginx

- brew搜索软件命令： brew search nginx  
-  brew安装软件命令： brew install nginx
-   brew卸载软件命令:  brew uninstall nginx

**nginx -v**  验证 nginx 是否安装成功， 若显示版本信息则证明安装成功。

### Homebrew 启动 nginx

```
% brew services start nginx  # 启动
% brew services stop nginx   # 停止
% brew services list    # 查看状态
```
==> Successfully started `nginx` (label: homebrew.mxcl.nginx)

验证nginx是否正常启动, 检查机器的进程信息和端口信息:

```
% ps -ef  # 查看所有进程信息
% ps -ef | grep "nginx"  # grep过滤命令, 只查看nginx 
% netstat -tunlp | grep "nginx"  # 查看端口信息, nginx默认80端口
```

**MacOS查看端口:**

```
% cat /opt/homebrew/etc/nginx/nginx.conf | grep listen
% sudo lsof -i -P | grep nginx
```

<figure style="text-align: center;">
<img src="/assets/img/nginx1.png" alt="" width="400">
<figcaption>MacOS查看nginx进程和端口</figcaption>
</figure>


### 访问nginx服务页面

浏览器访问: http://[自己机器的ip地址]:8080

如果修改这个网站的显示内容, 甚至仿冒真实网站界面，就能导致欺骗消费者或者窃取访问者提交的账号和密码信息。钓鱼网站一般只有一个或几个页面，和真实网站差别细微。

首先尝试利用curl命令, 发起http网络请求并且验证对方网站的信息:

```
curl https://www.taobao.com
curl -I https://www.taobao.com  # 可以看到web服务器信息(https://tengine.taobao.org)

curl -I 10.0.0.94:8080    
```

<figure style="text-align: center;">
<img src="/assets/img/nginx3.png" alt="" width="500">
<figcaption>查看淘宝网进程和端口</figcaption>
</figure>


<figure style="text-align: center;">
<img src="/assets/img/nginx2.png" alt="" width="400">
<figcaption>查看自己机器nginx进程和端口</figcaption>
</figure>


<figure style="text-align: center;">
<img src="/assets/img/nginx4.png" alt="" width="400">
<figcaption>查看nginx安装文件和路径信息</figcaption>
</figure>

```
% rpm -ql nginx | grep "index"  # Linux系统
```

如果使用某些方法修改index.html的内容, 如vim, 就可以仿冒网站内容.


---

## nginx 使用

### 静态网站配置

MacOS路径: /opt/homebrew/Cellar/nginx/1.27.5/html/index.html

没有找到nginx.conf

### 基于端口的多虚拟主机

在一个nginx下基于多个端口可以处理多个网站的内容: 修改配置文件,重启即可, 仍然是nginx.conf. 当然路径里面要有东西.

nginx.conf中一个虚拟主机(server块)就代表支持一个网站

### 访问日志

nginx能记录用户的每一次访问请求, 可以掌握服务器的动态信息; 可以对用户行为进行监测分析, 如访问时间/次数/频率.

仍然是修改配置nginx.conf:

```
# 如果只有一个虚拟主机, 只需要在server块中把 access_log 打开.
# 如果有多个虚拟主机, 要关注nginx.conf的层级关系

http{

    # 日志功能写在这里, 对以下所有网站都适用

    # 虚拟主机1
    server{

    }

    # 虚拟主机2
    server{


    }

    # 日志功能的具体配置如下

    include mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request"
                    '$status $body_bytes_sent "$http_referer" '
                    '"Shttp_user_agent" "$http_X_forwarded_for"*;
    access_log logs/access.log main;

    # -t 检查修改后的配置语法是否正确
    # -s reload 重启nginx
    # tail -f 监测
}
```


### 代理与中介

修改nginx.conf

编辑server块中location部分: 

```
location / {
    proxy_pass 代理网址;
}
```

## MacOS 配置

### 使用8080 显示自己的页面

启动

```
sudo brew services start nginx
# 访问localhost:8080，若出现欢迎界面，说明成功安装和启动
```

<figure style="text-align: center;">
<img src="/assets/img/nginx5.png" alt="" width="400">
<figcaption>启动nginx</figcaption>
</figure>

localhost:8080已经正常访问, 我们还是检查一下端口号:

/opt/homebrew/etc/nginx/nginx.conf

<figure style="text-align: center;">
<img src="/assets/img/nginx6.png" alt="" width="400">
<figcaption>检查nginx端口</figcaption>
</figure>

找到 Nginx 所在目录, 注意这里不是 nginx.conf 的目录, 而是 Nginx 的安装目录, 执行指令: brew info nginx , 如下图所示:

<figure style="text-align: center;">
<img src="/assets/img/nginx7.png" alt="" width="400">
<figcaption>找到安装目录</figcaption>
</figure>

其中 /opt/homebrew/Cellar/nginx/1.27.5 是安装目录, /opt/homebrew/etc/nginx/nginx.conf 是配置文件目录. 我们用到的是 nginx 的安装目录.

打开此目录: open /opt/homebrew/Cellar/, 将你的前端文件复制到此目录下的 html 文件下, 如下图:

<figure style="text-align: center;">
<img src="/assets/img/nginx8.png" alt="" width="400">
<figcaption>自己的前端文件</figcaption>
</figure>

注意 /opt/homebrew/Cellar/nginx/1.27.5 中的html(alias)文件夹就是/www

<figure style="text-align: center;">
<img src="/assets/img/nginx9.png" alt="" width="400">
<figcaption>nginx安装目录</figcaption>
</figure>

此时再次修改 nginx.conf 文件, 目的是找到你的 前端 文件, nginx.conf 的打开方式上面已经说了, 就是打开修改端口号的那个文件:

指定前端项目所在位置: 我的前端文件就是 html/jingyi , 开启页面我的文件也正好叫做index.html, 按需修改即可, 注意如果有改端口, 这里也要同步修改.

<figure style="text-align: center;">
<img src="/assets/img/nginx11.png" alt="" width="400">
<figcaption>按自己的配置修改.conf</figcaption>
</figure>

部署完要记得重启一下 nginx, 重启指令 sudo nginx -s reload, 刷新一下html, 就可以看到自己的页面了. 我这个是随便拿了两年前写的东西.

<figure style="text-align: center;">
<img src="/assets/img/nginx12.png" alt="" width="400">
<figcaption>可以看到自己的页面</figcaption>
</figure>

### 恢复默认8080, 另外开自己的页面

测试 mac 本机新增一个虚拟主机. 首先将server块内容改为默认, 8080显示回默认页面. 

<figure style="text-align: center;">
<img src="/assets/img/nginx15.png" alt="" width="400">
<figcaption>默认设置</figcaption>
</figure>

在该server块下方新建, 修改为自己的配置:

<figure style="text-align: center;">
<img src="/assets/img/nginx16.png" alt="" width="400">
<figcaption>自己的配置</figcaption>
</figure>

重启nginx:


<figure style="text-align: center;">
<img src="/assets/img/nginx13.png" alt="" width="400"><img src="/assets/img/nginx14.png" alt="" width="400">
<figcaption>自己的页面端口变成了8081</figcaption>
</figure>

当然也可以多个虚拟主机使用. 现在我的 server 虚拟主机都是放在当前 nginx.conf 文件中，如果当有很多的虚拟主机的时候，我们可以将这些配置虚拟主机单独放在一个文件里面进行配置，然后 include 到 nginx.conf 文件中即可.